/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */



#include <adchpp/Signal.h>
#include <adchpp/Client.h>
#include <adchpp/ClientManager.h>
#include <adchpp/LogManager.h>
#include <adchpp/PluginManager.h>
#include <adchpp/SocketManager.h>
#include <adchpp/Hub.h>
#include <adchpp/Bot.h>
#include <adchpp/Core.h>
#include <adchpp/Utils.h>
#include <adchpp/version.h>
#include <baselib/TigerHash.h>
#include <baselib/Text.h>
#include <baselib/SimpleXML.h>

using namespace adchpp;
using std::shared_ptr;
using std::make_shared;


/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_ParseException swig_types[0]
#define SWIGTYPE_p_Callback swig_types[1]
#define SWIGTYPE_p_CommandSignal swig_types[2]
#define SWIGTYPE_p_CommandSlot swig_types[3]
#define SWIGTYPE_p_DataFunction swig_types[4]
#define SWIGTYPE_p_Exception swig_types[5]
#define SWIGTYPE_p_Hub swig_types[6]
#define SWIGTYPE_p_ManagedConnection swig_types[7]
#define SWIGTYPE_p_PluginDataHandle swig_types[8]
#define SWIGTYPE_p_SWIGLUA_REF swig_types[9]
#define SWIGTYPE_p_SendHandler swig_types[10]
#define SWIGTYPE_p_Signal swig_types[11]
#define SWIGTYPE_p_SignalBadLine swig_types[12]
#define SWIGTYPE_p_SignalConnected swig_types[13]
#define SWIGTYPE_p_SignalDisconnected swig_types[14]
#define SWIGTYPE_p_SignalLog swig_types[15]
#define SWIGTYPE_p_SignalReady swig_types[16]
#define SWIGTYPE_p_SignalReceive swig_types[17]
#define SWIGTYPE_p_SignalSend swig_types[18]
#define SWIGTYPE_p_SignalState swig_types[19]
#define SWIGTYPE_p_SimpleXML swig_types[20]
#define SWIGTYPE_p_TLSInfo swig_types[21]
#define SWIGTYPE_p_TigerHash swig_types[22]
#define SWIGTYPE_p_adchpp__AdcCommand swig_types[23]
#define SWIGTYPE_p_adchpp__Bot swig_types[24]
#define SWIGTYPE_p_adchpp__Buffer swig_types[25]
#define SWIGTYPE_p_adchpp__CID swig_types[26]
#define SWIGTYPE_p_adchpp__Client swig_types[27]
#define SWIGTYPE_p_adchpp__ClientManager swig_types[28]
#define SWIGTYPE_p_adchpp__Entity swig_types[29]
#define SWIGTYPE_p_adchpp__Hub swig_types[30]
#define SWIGTYPE_p_adchpp__LogManager swig_types[31]
#define SWIGTYPE_p_adchpp__ManagedConnection swig_types[32]
#define SWIGTYPE_p_adchpp__Plugin swig_types[33]
#define SWIGTYPE_p_adchpp__PluginManager swig_types[34]
#define SWIGTYPE_p_adchpp__ServerInfo swig_types[35]
#define SWIGTYPE_p_adchpp__SignalT_void_fSimpleXML_const_RF_t swig_types[36]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_RF_t swig_types[37]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t swig_types[38]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t swig_types[39]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t swig_types[40]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t swig_types[41]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t swig_types[42]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t swig_types[43]
#define SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot swig_types[44]
#define SWIGTYPE_p_adchpp__SignalT_void_fstd__string_const_RF_t swig_types[45]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t swig_types[46]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t swig_types[47]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t swig_types[48]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t swig_types[49]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t swig_types[50]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t swig_types[51]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t swig_types[52]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t swig_types[53]
#define SWIGTYPE_p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t swig_types[54]
#define SWIGTYPE_p_adchpp__SocketManager swig_types[55]
#define SWIGTYPE_p_adchpp__SocketStats swig_types[56]
#define SWIGTYPE_p_difference_type swig_types[57]
#define SWIGTYPE_p_int swig_types[58]
#define SWIGTYPE_p_long_long swig_types[59]
#define SWIGTYPE_p_lua_State swig_types[60]
#define SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t swig_types[61]
#define SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t swig_types[62]
#define SWIGTYPE_p_shared_ptrT_adchpp__Plugin_t swig_types[63]
#define SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t swig_types[64]
#define SWIGTYPE_p_short swig_types[65]
#define SWIGTYPE_p_signed_char swig_types[66]
#define SWIGTYPE_p_size_type swig_types[67]
#define SWIGTYPE_p_std__exception swig_types[68]
#define SWIGTYPE_p_std__functionT_void_fF_t swig_types[69]
#define SWIGTYPE_p_std__functionT_void_fSimpleXML_const_RF_t swig_types[70]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t swig_types[71]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t swig_types[72]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_RF_t swig_types[73]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t swig_types[74]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t swig_types[75]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t swig_types[76]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_R_intF_t swig_types[77]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t swig_types[78]
#define SWIGTYPE_p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t swig_types[79]
#define SWIGTYPE_p_std__functionT_void_fstd__string_const_RF_t swig_types[80]
#define SWIGTYPE_p_std__string swig_types[81]
#define SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[85]
#define SWIGTYPE_p_unsigned_char swig_types[86]
#define SWIGTYPE_p_unsigned_int swig_types[87]
#define SWIGTYPE_p_unsigned_long_long swig_types[88]
#define SWIGTYPE_p_unsigned_short swig_types[89]
#define SWIGTYPE_p_value_type swig_types[90]
static swig_type_info *swig_types[92];
static swig_module_info swig_module = {swig_types, 91, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "luadchpp"
#define SWIG_init      luaopen_luadchpp
#define SWIG_init_user luaopen_luadchpp_user

#define SWIG_LUACODE   luaopen_luadchpp_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



/* Deleter for per-entity objects */
static void free_lua_ref(void* data) {
	SWIGLUA_REF* ref = reinterpret_cast<SWIGLUA_REF*>(data);
	swiglua_ref_clear(ref);
	delete ref;
}


	static adchpp::Core *getCurrentCore(lua_State *l) {
		lua_getglobal(l, "currentCore");
		void *core = lua_touserdata(l, lua_gettop(l));
		lua_pop(l, 1);
		return reinterpret_cast<Core*>(core);
	}

	namespace adchpp {
		const std::string &getConfigPath(lua_State *l);
	}


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


static size_t *new_size_t(int nelements) { 
  return new size_t[nelements](); 
}

static void delete_size_t(size_t *ary) { 
  delete [] ary; 
}

static size_t size_t_getitem(size_t *ary, int index) {
    return ary[index];
}
static void size_t_setitem(size_t *ary, int index, size_t value) {
    ary[index] = value;
}

SWIGINTERN adchpp::Entity *std_vector_Sl_adchpp_Entity_Sm__Sg____getitem__(std::vector< adchpp::Entity * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_adchpp_Entity_Sm__Sg____setitem__(std::vector< adchpp::Entity * > *self,unsigned int idx,adchpp::Entity *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN std::string std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,unsigned int idx,std::string val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned char std_vector_Sl_uint8_t_Sg____getitem__(std::vector< uint8_t > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_uint8_t_Sg____setitem__(std::vector< uint8_t > *self,unsigned int idx,unsigned char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN shared_ptr< adchpp::ServerInfo > std_vector_Sl_shared_ptr_Sl_adchpp_ServerInfo_Sg__Sg____getitem__(std::vector< shared_ptr< adchpp::ServerInfo > > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_shared_ptr_Sl_adchpp_ServerInfo_Sg__Sg____setitem__(std::vector< shared_ptr< adchpp::ServerInfo > > *self,unsigned int idx,shared_ptr< adchpp::ServerInfo > val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

	namespace adchpp {
	typedef std::vector<adchpp::Entity*> EntityList;
	}


typedef ServerInfo::TLSInfo TLSInfo;

SWIGINTERN void TigerHash_update(TigerHash *self,std::string const &data){
			self->update(data.data(), data.size());
		}
SWIGINTERN std::string TigerHash_finalize(TigerHash *self){
			return std::string(reinterpret_cast<const char*>(self->finalize()), TigerHash::BYTES);
		}
SWIGINTERN shared_ptr< adchpp::Buffer > adchpp_Buffer_create(std::string const &s){
			return make_shared<Buffer>(s);
		}
SWIGINTERN shared_ptr< adchpp::ServerInfo > adchpp_ServerInfo_create(){
			return make_shared<ServerInfo>();
		}
SWIGINTERN void adchpp_SocketManager_addJob(adchpp::SocketManager *self,long const msec,adchpp::SocketManager::Callback callback){
			self->addJob(msec, callback);
		}
SWIGINTERN void adchpp_SocketManager_addJob_str(adchpp::SocketManager *self,std::string const &time,adchpp::SocketManager::Callback callback){
			self->addJob(time, callback);
		}
SWIGINTERN adchpp::SocketManager::Callback adchpp_SocketManager_addTimedJob(adchpp::SocketManager *self,long const msec,adchpp::SocketManager::Callback callback){
			return self->addTimedJob(msec, callback);
		}
SWIGINTERN adchpp::SocketManager::Callback adchpp_SocketManager_addTimedJob_str(adchpp::SocketManager *self,std::string const &time,adchpp::SocketManager::Callback callback){
			return self->addTimedJob(time, callback);
		}

typedef adchpp::Reason DCReason;

SWIGINTERN std::string adchpp_CID_data(adchpp::CID const *self){ return std::string(reinterpret_cast<const char*>(self->data()), CID::SIZE); }
SWIGINTERN std::string adchpp_CID___str__(adchpp::CID *self){ return self->toBase32(); }
SWIGINTERN std::string adchpp_AdcCommand_getCommandString(adchpp::AdcCommand *self){
		int cmd = self->getCommand();
		return std::string(reinterpret_cast<const char*>(&cmd), 3);
	}
SWIGINTERN uint32_t adchpp_AdcCommand_toCMD__SWIG_1(std::string const &cmd){
		if(cmd.length() != 3) {
			return 0;
		}
		return (((uint32_t)cmd[0]) | (((uint32_t)cmd[1])<<8) | (((uint32_t)cmd[2])<<16));
	}
SWIGINTERN bool adchpp_AdcCommand_hasParam(adchpp::AdcCommand *self,char const *name,size_t start){
		std::string tmp;
        return self->getParam(name, start, tmp);
	}
SWIGINTERN std::string adchpp_AdcCommand_getParam__SWIG_1(adchpp::AdcCommand *self,char const *name,size_t start){
		std::string tmp;
		if(self->getParam(name, start, tmp)) {
			return tmp;
		}
		return std::string();
	}
SWIGINTERN adchpp::Client *adchpp_Entity_asClient(adchpp::Entity *self){
		return self->getType() == Entity::TYPE_CLIENT ? static_cast<Client*>(self) : nullptr;
	}
SWIGINTERN Hub *adchpp_Entity_asHub(adchpp::Entity *self){
		return self->getType() == Entity::TYPE_HUB ? static_cast<Hub*>(self) : nullptr;
	}
SWIGINTERN adchpp::Bot *adchpp_Entity_asBot(adchpp::Entity *self){
		return self->getType() == Entity::TYPE_BOT ? static_cast<Bot*>(self) : nullptr;
	}
SWIGINTERN SWIGLUA_REF adchpp_Entity_getPluginData(adchpp::Entity *self,PluginDataHandle const &handle){
		void* ret = self->getPluginData(handle);
		if(ret) {
			return *reinterpret_cast<SWIGLUA_REF*>(ret);
		}
		return SWIGLUA_REF();
	}
SWIGINTERN void adchpp_Entity_setPluginData(adchpp::Entity *self,PluginDataHandle const &handle,SWIGLUA_REF data){
		self->setPluginData(handle, reinterpret_cast<void*>(new SWIGLUA_REF(data)));
	}
SWIGINTERN void adchpp_Entity_clearPluginData(adchpp::Entity *self,PluginDataHandle const &handle){
		self->clearPluginData(handle);
	}
SWIGINTERN void adchpp_Client_disconnect__SWIG_0(adchpp::Client *self,int reason){
			self->disconnect(static_cast<DCReason>(reason), Util::emptyString);
		}
SWIGINTERN void adchpp_Client_disconnect__SWIG_1(adchpp::Client *self,int reason,std::string const &info){
			self->disconnect(static_cast<DCReason>(reason), info);
		}
SWIGINTERN void adchpp_Bot_disconnect__SWIG_0(adchpp::Bot *self,int reason){
			self->disconnect(static_cast<DCReason>(reason), Util::emptyString);
		}
SWIGINTERN void adchpp_Bot_disconnect__SWIG_1(adchpp::Bot *self,int reason,std::string const &info){
			self->disconnect(static_cast<DCReason>(reason), info);
		}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &) > *self,std::function< void (adchpp::Entity &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_adchpp_AdcCommand_SA__Sc_bool_SA__SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *self,std::function< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_std_string_SS_const_SA__SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &,std::string const &) > *self,std::function< void (adchpp::Entity &,std::string const &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_adchpp_AdcCommand_SS_const_SA__Sc_bool_SA__SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *self,std::function< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_int_SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &,int) > *self,std::function< void (adchpp::Entity &,int) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_DCReason_Sc_std_string_SS_const_SA__SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *self,std::function< void (adchpp::Entity &,DCReason,std::string const &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_StringList_SS_const_SA__Sc_bool_SA__SP__Sg__connect(adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *self,std::function< void (adchpp::Entity &,StringList const &,bool &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_SimpleXML_SS_const_SA__SP__Sg__connect(adchpp::Signal< void (SimpleXML const &) > *self,std::function< void (SimpleXML const &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_Signal_Sl_void_Sp_std_string_SS_const_SA__SP__Sg__connect(adchpp::Signal< void (std::string const &) > *self,std::function< void (std::string const &) > f){
		return manage(self, f);
	}
SWIGINTERN adchpp::Bot *adchpp_ClientManager_createBot(adchpp::ClientManager *self,adchpp::Bot::SendHandler handler){
		return self->createBot(handler);
	}
SWIGINTERN adchpp::Bot *adchpp_ClientManager_createSimpleBot(adchpp::ClientManager *self){
		return self->createBot(Bot::SendHandler());
	}
SWIGINTERN adchpp::EntityList adchpp_ClientManager_getEntities(adchpp::ClientManager *self){
		EntityList ret;
		for(ClientManager::EntityMap::iterator i = self->getEntities().begin(); i != self->getEntities().end(); ++i) {
			ret.push_back(i->second);
		}
		return ret;
	}
SWIGINTERN adchpp::Entity *adchpp_ClientManager_findByCID(adchpp::ClientManager *self,adchpp::CID const &cid){
		return self->getEntity(self->getSID(cid));
	}
SWIGINTERN adchpp::Entity *adchpp_ClientManager_findByNick(adchpp::ClientManager *self,std::string const &nick){
		return self->getEntity(self->getSID(nick));
	}
SWIGINTERN time_t adchpp_ClientManager_getStartTime(adchpp::ClientManager const *self){
		return (self->getCore().getStartTime() - time::ptime(boost::gregorian::date(1970, 1, 1))).total_seconds();
	}
SWIGINTERN uint32_t adchpp_ClientManager_getUpTime(adchpp::ClientManager const *self){
		return (time::now() - self->getCore().getStartTime()).total_seconds();
	}
SWIGINTERN void adchpp_PluginManager_attention(adchpp::PluginManager *self,std::function< void () > f){
			self->attention(f);
		}
SWIGINTERN adchpp::ManagedConnectionPtr adchpp_PluginManager_onCommand(adchpp::PluginManager *self,std::string const &commandName,adchpp::PluginManager::CommandSlot f){
			return ManagedConnectionPtr(new ManagedConnection(self->onCommand(commandName, f)));
		}
SWIGINTERN PluginDataHandle adchpp_PluginManager_registerPluginData(adchpp::PluginManager *self){
		return self->registerPluginData(free_lua_ref);
	}


namespace adchpp {
	ClientManager* getCM(lua_State* l) { return &getCurrentCore(l)->getClientManager(); }
	LogManager* getLM(lua_State* l) { return &getCurrentCore(l)->getLogManager(); }
	PluginManager* getPM(lua_State* l) { return &getCurrentCore(l)->getPluginManager(); }
	SocketManager* getSM(lua_State* l) { return &getCurrentCore(l)->getSocketManager(); }

	const std::string &getConfigPath(lua_State *l) { return getCurrentCore(l)->getConfigPath(); }
	const std::string &getDataPath(lua_State *l) { return getCurrentCore(l)->getDataPath(); }
	const std::string &Util_getCfgPath(lua_State *l) { return getConfigPath(l); }
	std::string Util_getLocalIp(lua_State *l) { return Utils::getLocalIp(); }
}


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_free_lua_ref(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  
  SWIG_check_num_args("free_lua_ref",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("free_lua_ref",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"free_lua_ref");
  free_lua_ref(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}




static int traceback (lua_State *L) {
	lua_getfield(L, LUA_GLOBALSINDEX, "debug");
	if (!lua_istable(L, -1)) {
		printf("No debug table\n");
		lua_pop(L, 1);
		return 1;
	}
	lua_getfield(L, -1, "traceback");
	if (!lua_isfunction(L, -1)) {
		printf("No traceback in debug\n");
		lua_pop(L, 2);
		return 1;
	}

	lua_pushvalue(L, 1); /* pass error message */
	lua_pushinteger(L, 2); /* skip this function and traceback */
	lua_call(L, 2, 1); /* call debug.traceback */
	return 1;
}

class RegistryItem : private boost::noncopyable {
public:
	RegistryItem(lua_State* L_) : L(L_), index(luaL_ref(L, LUA_REGISTRYINDEX)) {
	}
	~RegistryItem() {
		luaL_unref(L, LUA_REGISTRYINDEX, index);
	}

	void push() { lua_rawgeti(L, LUA_REGISTRYINDEX, index); }
private:
	lua_State* L;
	int index;
};

class LuaFunction {
public:
	LuaFunction(lua_State* L_) : L(L_), registryItem(new RegistryItem(L_)) { }

	void operator()() {
		pushFunction();
		docall(0, 0);
	}

	void operator()(adchpp::Entity& c) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		docall(1, 0);
	}

	void operator()(adchpp::Entity& c, const std::string& str) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		lua_pushstring(L, str.c_str());

		docall(2, 0);
	}

	void operator()(adchpp::Entity& c, int i) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		lua_pushinteger(L, i);

		docall(2, 0);
	}

	void operator()(adchpp::Entity& c, adchpp::AdcCommand& cmd) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		SWIG_NewPointerObj(L, &cmd, SWIGTYPE_p_adchpp__AdcCommand, 0);

		docall(2, 0);
	}

	void operator()(adchpp::Entity& c, adchpp::AdcCommand& cmd, bool& i) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		SWIG_NewPointerObj(L, &cmd, SWIGTYPE_p_adchpp__AdcCommand, 0);
		lua_pushboolean(L, i);

		if(docall(3, 1) != 0) {
			return;
		}

		if(lua_isboolean(L, -1)) {
			i &= lua_toboolean(L, -1) == 1;
		}
		lua_pop(L, 1);
	}
	
	void operator()(adchpp::Entity& c, const adchpp::AdcCommand& cmd, bool& i) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		SWIG_NewPointerObj(L, &cmd, SWIGTYPE_p_adchpp__AdcCommand, 0);
		lua_pushboolean(L, i);

		if(docall(3, 1) != 0) {
			return;
		}

		if(lua_isboolean(L, -1)) {
			i &= lua_toboolean(L, -1) == 1;
		}
		lua_pop(L, 1);
	}

	void operator()(const SimpleXML& s) {
		pushFunction();

		SWIG_NewPointerObj(L, &s, SWIGTYPE_p_SimpleXML, 0);
		docall(1, 0);
	}

	void operator()(adchpp::Entity& c, const StringList& cmd, bool& i) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		SWIG_NewPointerObj(L, &cmd, SWIGTYPE_p_std__vectorT_std__string_t, 0);
		lua_pushboolean(L, i);

		if(docall(3, 1) != 0) {
			return;
		}

        if(lua_isboolean(L, -1)) {
			i &= lua_toboolean(L, -1) == 1;
		}
        lua_pop(L, 1);
	}

	void operator()(adchpp::Entity& c, DCReason reason, const std::string& info) {
		pushFunction();

		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
		lua_pushnumber(L, reason);
		lua_pushstring(L, info.c_str());

		if(docall(3, 0) != 0) {
			return;
		}
	}

	void operator()(adchpp::Bot& bot, const adchpp::BufferPtr& buf) {
		pushFunction();

		SWIG_NewPointerObj(L, &bot, SWIGTYPE_p_adchpp__Bot, 0);
		SWIG_NewPointerObj(L, &buf, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, 0);

		docall(2, 0);
	}

private:
	void pushFunction() {
		registryItem->push();
	}

	int docall(int narg, int nret) {
		int status;
		int base = lua_gettop(L) - narg;  /* function index */
		lua_pushcfunction(L, traceback);  /* push traceback function */
		lua_insert(L, base);  /* put it under chunk and args */
		status = lua_pcall(L, narg, nret, base);
		lua_remove(L, base);  /* remove traceback function */
		if(status == LUA_ERRRUN) {
			if (!lua_isnil(L, -1)) {
				const char *msg = lua_tostring(L, -1);
				if (msg == NULL) msg = "(error object is not a string)";
				fprintf(stderr, "%d, %d: %s\n", status, lua_type(L, -1), msg);
			} else {
				fprintf(stderr, "Lua error without error");
			}
			lua_pop(L, 1);
		} else if(status == LUA_ERRMEM) {
			fprintf(stderr, "Lua memory allocation error\n");
		} else if(status == LUA_ERRERR) {
			fprintf(stderr, "Lua error function error\n");
		} else if(status != 0) {
			fprintf(stderr, "Unknown lua status: %d\n", status);
		}

		return status;
	}

	lua_State* L;
	std::shared_ptr<RegistryItem> registryItem;
};

static int exec(lua_State* L) {
	void* p;
	if(SWIG_IsOK(SWIG_ConvertPtr(L, lua_upvalueindex(1), &p, SWIGTYPE_p_std__functionT_void_fF_t, 0))) {
		(*reinterpret_cast<std::function<void ()>*>(p))();
	}
	return 0;
}


static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_size_t(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  size_t *result = 0 ;
  
  SWIG_check_num_args("new_size_t",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("new_size_t",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (size_t *)new_size_t(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_size_t(lua_State* L) {
  int SWIG_arg = 0;
  size_t *arg1 = (size_t *) 0 ;
  
  SWIG_check_num_args("delete_size_t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_size_t",1,"size_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("delete_size_t",1,SWIGTYPE_p_unsigned_int);
  }
  
  delete_size_t(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_size_t_getitem(lua_State* L) {
  int SWIG_arg = 0;
  size_t *arg1 = (size_t *) 0 ;
  int arg2 ;
  size_t result;
  
  SWIG_check_num_args("size_t_getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size_t_getitem",1,"size_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("size_t_getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("size_t_getitem",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (size_t)size_t_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_size_t_setitem(lua_State* L) {
  int SWIG_arg = 0;
  size_t *arg1 = (size_t *) 0 ;
  int arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("size_t_setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size_t_setitem",1,"size_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("size_t_setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("size_t_setitem",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("size_t_setitem",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  size_t_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  adchpp::ServerInfo *result = 0 ;
  
  SWIG_check_num_args("shared_ptr< adchpp::ServerInfo >::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shared_ptr< adchpp::ServerInfo >::operator ->",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr___deref__",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (adchpp::ServerInfo *)(arg1)->operator ->();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__ServerInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_bind4_set(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind4",1,"shared_ptr< adchpp::ServerInfo > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::bind4",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_bind4_set",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      if (arg1) (*arg1)->bind4 = *arg2;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_bind4_get(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind4",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_bind4_get",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (std::string *) & ((*arg1)->bind4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_bind6_set(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind6",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind6",1,"shared_ptr< adchpp::ServerInfo > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::bind6",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_bind6_set",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      if (arg1) (*arg1)->bind6 = *arg2;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_bind6_get(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind6",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_bind6_get",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (std::string *) & ((*arg1)->bind6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_address4_set(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address4",1,"shared_ptr< adchpp::ServerInfo > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::address4",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_address4_set",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      if (arg1) (*arg1)->address4 = *arg2;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_address4_get(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address4",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_address4_get",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (std::string *) & ((*arg1)->address4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_address6_set(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address6",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address6",1,"shared_ptr< adchpp::ServerInfo > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::address6",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_address6_set",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      if (arg1) (*arg1)->address6 = *arg2;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_address6_get(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address6",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_address6_get",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (std::string *) & ((*arg1)->address6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_port_set(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::port",1,"shared_ptr< adchpp::ServerInfo > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::port",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_port_set",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      if (arg1) (*arg1)->port = *arg2;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_port_get(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::port",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_port_get",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (std::string *) & ((*arg1)->port);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_TLSParams_set(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  TLSInfo *arg2 = (TLSInfo *) 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::TLSParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::TLSParams",1,"shared_ptr< adchpp::ServerInfo > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("adchpp::ServerInfo::TLSParams",2,"TLSInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_TLSParams_set",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TServerInfoPtr_TLSParams_set",2,SWIGTYPE_p_TLSInfo);
  }
  
  {
    try {
      if (arg1) (*arg1)->TLSParams = *arg2;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_TLSParams_get(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  TLSInfo *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::TLSParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::TLSParams",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_TLSParams_get",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (TLSInfo *)& ((*arg1)->TLSParams);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TLSInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_secure(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ServerInfo::secure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::secure",1,"shared_ptr< adchpp::ServerInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_secure",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = (bool)(*arg1)->secure();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoPtr_create(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) 0 ;
  shared_ptr< adchpp::ServerInfo > result;
  
  SWIG_check_num_args("adchpp::ServerInfo::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::create",1,"shared_ptr< adchpp::ServerInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoPtr_create",1,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  
  {
    try {
      result = adchpp_ServerInfo_create();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::ServerInfo > * resultptr = new shared_ptr< adchpp::ServerInfo >((const shared_ptr< adchpp::ServerInfo > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TServerInfoPtr(void *obj) {
shared_ptr< adchpp::ServerInfo > *arg1 = (shared_ptr< adchpp::ServerInfo > *) obj;
delete arg1;
}
static swig_lua_attribute swig_TServerInfoPtr_attributes[] = {
    { "bind4", _wrap_TServerInfoPtr_bind4_get, _wrap_TServerInfoPtr_bind4_set },
    { "bind6", _wrap_TServerInfoPtr_bind6_get, _wrap_TServerInfoPtr_bind6_set },
    { "address4", _wrap_TServerInfoPtr_address4_get, _wrap_TServerInfoPtr_address4_set },
    { "address6", _wrap_TServerInfoPtr_address6_get, _wrap_TServerInfoPtr_address6_set },
    { "port", _wrap_TServerInfoPtr_port_get, _wrap_TServerInfoPtr_port_set },
    { "TLSParams", _wrap_TServerInfoPtr_TLSParams_get, _wrap_TServerInfoPtr_TLSParams_set },
    {0,0,0}
};
static swig_lua_method swig_TServerInfoPtr_methods[]= {
    { "__deref__", _wrap_TServerInfoPtr___deref__},
    { "secure", _wrap_TServerInfoPtr_secure},
    { "create", _wrap_TServerInfoPtr_create},
    {0,0}
};
static swig_lua_method swig_TServerInfoPtr_meta[] = {
    { "__deref__", _wrap_TServerInfoPtr___deref__},
    {0,0}
};

static swig_lua_attribute swig_TServerInfoPtr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TServerInfoPtr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TServerInfoPtr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TServerInfoPtr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TServerInfoPtr_Sf_SwigStatic = {
    "TServerInfoPtr",
    swig_TServerInfoPtr_Sf_SwigStatic_methods,
    swig_TServerInfoPtr_Sf_SwigStatic_attributes,
    swig_TServerInfoPtr_Sf_SwigStatic_constants,
    swig_TServerInfoPtr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TServerInfoPtr_bases[] = {0};
static const char *swig_TServerInfoPtr_base_names[] = {0};
static swig_lua_class _wrap_class_TServerInfoPtr = { "TServerInfoPtr", "TServerInfoPtr", &SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0, swig_delete_TServerInfoPtr, swig_TServerInfoPtr_methods, swig_TServerInfoPtr_attributes, &swig_TServerInfoPtr_Sf_SwigStatic, swig_TServerInfoPtr_meta, swig_TServerInfoPtr_bases, swig_TServerInfoPtr_base_names };

static int _wrap_TManagedConnectionPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ManagedConnection > *arg1 = (shared_ptr< adchpp::ManagedConnection > *) 0 ;
  adchpp::ManagedConnection *result = 0 ;
  
  SWIG_check_num_args("shared_ptr< adchpp::ManagedConnection >::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shared_ptr< adchpp::ManagedConnection >::operator ->",1,"shared_ptr< adchpp::ManagedConnection > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,0))){
    SWIG_fail_ptr("TManagedConnectionPtr___deref__",1,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t);
  }
  
  {
    try {
      result = (adchpp::ManagedConnection *)(arg1)->operator ->();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__ManagedConnection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TManagedConnectionPtr_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ManagedConnection > *arg1 = (shared_ptr< adchpp::ManagedConnection > *) 0 ;
  
  SWIG_check_num_args("adchpp::ManagedConnection::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ManagedConnection::disconnect",1,"shared_ptr< adchpp::ManagedConnection > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,0))){
    SWIG_fail_ptr("TManagedConnectionPtr_disconnect",1,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t);
  }
  
  {
    try {
      (*arg1)->disconnect();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TManagedConnectionPtr_release(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ManagedConnection > *arg1 = (shared_ptr< adchpp::ManagedConnection > *) 0 ;
  
  SWIG_check_num_args("adchpp::ManagedConnection::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ManagedConnection::release",1,"shared_ptr< adchpp::ManagedConnection > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,0))){
    SWIG_fail_ptr("TManagedConnectionPtr_release",1,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t);
  }
  
  {
    try {
      (*arg1)->release();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TManagedConnectionPtr(void *obj) {
shared_ptr< adchpp::ManagedConnection > *arg1 = (shared_ptr< adchpp::ManagedConnection > *) obj;
delete arg1;
}
static swig_lua_attribute swig_TManagedConnectionPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TManagedConnectionPtr_methods[]= {
    { "__deref__", _wrap_TManagedConnectionPtr___deref__},
    { "disconnect", _wrap_TManagedConnectionPtr_disconnect},
    { "release", _wrap_TManagedConnectionPtr_release},
    {0,0}
};
static swig_lua_method swig_TManagedConnectionPtr_meta[] = {
    { "__deref__", _wrap_TManagedConnectionPtr___deref__},
    {0,0}
};

static swig_lua_attribute swig_TManagedConnectionPtr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TManagedConnectionPtr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TManagedConnectionPtr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TManagedConnectionPtr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TManagedConnectionPtr_Sf_SwigStatic = {
    "TManagedConnectionPtr",
    swig_TManagedConnectionPtr_Sf_SwigStatic_methods,
    swig_TManagedConnectionPtr_Sf_SwigStatic_attributes,
    swig_TManagedConnectionPtr_Sf_SwigStatic_constants,
    swig_TManagedConnectionPtr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TManagedConnectionPtr_bases[] = {0};
static const char *swig_TManagedConnectionPtr_base_names[] = {0};
static swig_lua_class _wrap_class_TManagedConnectionPtr = { "TManagedConnectionPtr", "TManagedConnectionPtr", &SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,0, swig_delete_TManagedConnectionPtr, swig_TManagedConnectionPtr_methods, swig_TManagedConnectionPtr_attributes, &swig_TManagedConnectionPtr_Sf_SwigStatic, swig_TManagedConnectionPtr_meta, swig_TManagedConnectionPtr_bases, swig_TManagedConnectionPtr_base_names };

static int _wrap_new_TEntityList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::vector",0,0)
  {
    try {
      result = (std::vector< adchpp::Entity * > *)new std::vector< adchpp::Entity * >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TEntityList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< adchpp::Entity * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  {
    try {
      result = (std::vector< adchpp::Entity * > *)new std::vector< adchpp::Entity * >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TEntityList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = 0 ;
  std::vector< adchpp::Entity * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::vector",1,"std::vector< adchpp::Entity * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("new_TEntityList",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      result = (std::vector< adchpp::Entity * > *)new std::vector< adchpp::Entity * >((std::vector< adchpp::Entity * > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TEntityList__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  adchpp::Entity *arg2 = (adchpp::Entity *) 0 ;
  std::vector< adchpp::Entity * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< adchpp::Entity * >::vector",2,"adchpp::Entity *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("new_TEntityList",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (std::vector< adchpp::Entity * > *)new std::vector< adchpp::Entity * >(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TEntityList(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TEntityList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TEntityList__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TEntityList__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_adchpp__Entity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_TEntityList__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TEntityList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< adchpp::Entity * >::vector()\n"
    "    std::vector< adchpp::Entity * >::vector(unsigned int)\n"
    "    std::vector< adchpp::Entity * >::vector(std::vector< adchpp::Entity * > const &)\n"
    "    std::vector< adchpp::Entity * >::vector(unsigned int,adchpp::Entity *)\n");
  lua_error(L);return 0;
}


static int _wrap_TEntityList_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::size",1,"std::vector< adchpp::Entity * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_size",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< adchpp::Entity * > const *)arg1)->size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::max_size",1,"std::vector< adchpp::Entity * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_max_size",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< adchpp::Entity * > const *)arg1)->max_size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::empty",1,"std::vector< adchpp::Entity * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_empty",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      result = (bool)((std::vector< adchpp::Entity * > const *)arg1)->empty();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::clear",1,"std::vector< adchpp::Entity * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_clear",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      (arg1)->clear();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  adchpp::Entity *arg2 = (adchpp::Entity *) 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::push_back",1,"std::vector< adchpp::Entity * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< adchpp::Entity * >::push_back",2,"adchpp::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_push_back",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("TEntityList_push_back",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      (arg1)->push_back(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::pop_back",1,"std::vector< adchpp::Entity * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_pop_back",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      (arg1)->pop_back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  adchpp::Entity *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::front",1,"std::vector< adchpp::Entity * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_front",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      result = (adchpp::Entity *)((std::vector< adchpp::Entity * > const *)arg1)->front();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  adchpp::Entity *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::back",1,"std::vector< adchpp::Entity * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList_back",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  {
    try {
      result = (adchpp::Entity *)((std::vector< adchpp::Entity * > const *)arg1)->back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  unsigned int arg2 ;
  adchpp::Entity *result = 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::__getitem__",1,"std::vector< adchpp::Entity * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< adchpp::Entity * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList___getitem",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try {
      try {
        result = (adchpp::Entity *)std_vector_Sl_adchpp_Entity_Sm__Sg____getitem__(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TEntityList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) 0 ;
  unsigned int arg2 ;
  adchpp::Entity *arg3 = (adchpp::Entity *) 0 ;
  
  SWIG_check_num_args("std::vector< adchpp::Entity * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< adchpp::Entity * >::__setitem__",1,"std::vector< adchpp::Entity * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< adchpp::Entity * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< adchpp::Entity * >::__setitem__",3,"adchpp::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,0))){
    SWIG_fail_ptr("TEntityList___setitem",1,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("TEntityList___setitem",3,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      try {
        std_vector_Sl_adchpp_Entity_Sm__Sg____setitem__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TEntityList(void *obj) {
std::vector< adchpp::Entity * > *arg1 = (std::vector< adchpp::Entity * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_TEntityList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TEntityList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TEntityList_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TEntityList_methods[]= {
    { "size", _wrap_TEntityList_size},
    { "max_size", _wrap_TEntityList_max_size},
    { "empty", _wrap_TEntityList_empty},
    { "clear", _wrap_TEntityList_clear},
    { "push_back", _wrap_TEntityList_push_back},
    { "pop_back", _wrap_TEntityList_pop_back},
    { "front", _wrap_TEntityList_front},
    { "back", _wrap_TEntityList_back},
    { "__getitem", _wrap_TEntityList___getitem},
    { "__setitem", _wrap_TEntityList___setitem},
    {0,0}
};
static swig_lua_method swig_TEntityList_meta[] = {
    { "__getitem", _wrap_TEntityList___getitem},
    { "__setitem", _wrap_TEntityList___setitem},
    {0,0}
};

static swig_lua_attribute swig_TEntityList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TEntityList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TEntityList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TEntityList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TEntityList_Sf_SwigStatic = {
    "TEntityList",
    swig_TEntityList_Sf_SwigStatic_methods,
    swig_TEntityList_Sf_SwigStatic_attributes,
    swig_TEntityList_Sf_SwigStatic_constants,
    swig_TEntityList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TEntityList_bases[] = {0};
static const char *swig_TEntityList_base_names[] = {0};
static swig_lua_class _wrap_class_TEntityList = { "TEntityList", "TEntityList", &SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,_proxy__wrap_new_TEntityList, swig_delete_TEntityList, swig_TEntityList_methods, swig_TEntityList_attributes, &swig_TEntityList_Sf_SwigStatic, swig_TEntityList_meta, swig_TEntityList_bases, swig_TEntityList_base_names };

static int _wrap_new_TStringList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",0,0)
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TStringList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TStringList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_TStringList",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TStringList__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::vector",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TStringList(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TStringList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TStringList__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TStringList__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TStringList__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TStringList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(unsigned int)\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(unsigned int,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_TStringList_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::size",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< std::string > const *)arg1)->size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::max_size",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_max_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< std::string > const *)arg1)->max_size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::empty",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_empty",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::clear",1,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_clear",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      (arg1)->clear();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("std::vector< std::string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::push_back",1,"std::vector< std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::push_back",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_push_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  {
    try {
      (arg1)->push_back(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::pop_back",1,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_pop_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      (arg1)->pop_back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::front",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_front",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->front();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::back",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__getitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList___getitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg____getitem__(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TStringList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("std::vector< std::string >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__setitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::vector< std::string >::__setitem__",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TStringList___setitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TStringList(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_TStringList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TStringList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TStringList_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TStringList_methods[]= {
    { "size", _wrap_TStringList_size},
    { "max_size", _wrap_TStringList_max_size},
    { "empty", _wrap_TStringList_empty},
    { "clear", _wrap_TStringList_clear},
    { "push_back", _wrap_TStringList_push_back},
    { "pop_back", _wrap_TStringList_pop_back},
    { "front", _wrap_TStringList_front},
    { "back", _wrap_TStringList_back},
    { "__getitem", _wrap_TStringList___getitem},
    { "__setitem", _wrap_TStringList___setitem},
    {0,0}
};
static swig_lua_method swig_TStringList_meta[] = {
    { "__getitem", _wrap_TStringList___getitem},
    { "__setitem", _wrap_TStringList___setitem},
    {0,0}
};

static swig_lua_attribute swig_TStringList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TStringList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TStringList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TStringList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TStringList_Sf_SwigStatic = {
    "TStringList",
    swig_TStringList_Sf_SwigStatic_methods,
    swig_TStringList_Sf_SwigStatic_attributes,
    swig_TStringList_Sf_SwigStatic_constants,
    swig_TStringList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TStringList_bases[] = {0};
static const char *swig_TStringList_base_names[] = {0};
static swig_lua_class _wrap_class_TStringList = { "TStringList", "TStringList", &SWIGTYPE_p_std__vectorT_std__string_t,_proxy__wrap_new_TStringList, swig_delete_TStringList, swig_TStringList_methods, swig_TStringList_attributes, &swig_TStringList_Sf_SwigStatic, swig_TStringList_meta, swig_TStringList_bases, swig_TStringList_base_names };

static int _wrap_new_TByteVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::vector",0,0)
  {
    try {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TByteVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< uint8_t >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  {
    try {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TByteVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< uint8_t >::vector",1,"std::vector< uint8_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_TByteVector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TByteVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned char arg2 ;
  std::vector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< uint8_t >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< uint8_t >::vector",2,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  {
    try {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TByteVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TByteVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TByteVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TByteVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TByteVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TByteVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint8_t >::vector()\n"
    "    std::vector< uint8_t >::vector(unsigned int)\n"
    "    std::vector< uint8_t >::vector(std::vector< uint8_t > const &)\n"
    "    std::vector< uint8_t >::vector(unsigned int,unsigned char)\n");
  lua_error(L);return 0;
}


static int _wrap_TByteVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::size",1,"std::vector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< uint8_t > const *)arg1)->size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< uint8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::max_size",1,"std::vector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< uint8_t > const *)arg1)->max_size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::empty",1,"std::vector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::clear",1,"std::vector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      (arg1)->clear();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::push_back",1,"std::vector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< uint8_t >::push_back",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  {
    try {
      (arg1)->push_back(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::pop_back",1,"std::vector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      (arg1)->pop_back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< uint8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::front",1,"std::vector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_front",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      result = (unsigned char)((std::vector< uint8_t > const *)arg1)->front();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< uint8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::back",1,"std::vector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  {
    try {
      result = (unsigned char)((std::vector< uint8_t > const *)arg1)->back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned int arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< uint8_t >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::__getitem__",1,"std::vector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< uint8_t >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try {
      try {
        result = (unsigned char)std_vector_Sl_uint8_t_Sg____getitem__(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TByteVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("std::vector< uint8_t >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< uint8_t >::__setitem__",1,"std::vector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< uint8_t >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< uint8_t >::__setitem__",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("TByteVector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  {
    try {
      try {
        std_vector_Sl_uint8_t_Sg____setitem__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TByteVector(void *obj) {
std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_TByteVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TByteVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TByteVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TByteVector_methods[]= {
    { "size", _wrap_TByteVector_size},
    { "max_size", _wrap_TByteVector_max_size},
    { "empty", _wrap_TByteVector_empty},
    { "clear", _wrap_TByteVector_clear},
    { "push_back", _wrap_TByteVector_push_back},
    { "pop_back", _wrap_TByteVector_pop_back},
    { "front", _wrap_TByteVector_front},
    { "back", _wrap_TByteVector_back},
    { "__getitem", _wrap_TByteVector___getitem},
    { "__setitem", _wrap_TByteVector___setitem},
    {0,0}
};
static swig_lua_method swig_TByteVector_meta[] = {
    { "__getitem", _wrap_TByteVector___getitem},
    { "__setitem", _wrap_TByteVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_TByteVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TByteVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TByteVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TByteVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TByteVector_Sf_SwigStatic = {
    "TByteVector",
    swig_TByteVector_Sf_SwigStatic_methods,
    swig_TByteVector_Sf_SwigStatic_attributes,
    swig_TByteVector_Sf_SwigStatic_constants,
    swig_TByteVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TByteVector_bases[] = {0};
static const char *swig_TByteVector_base_names[] = {0};
static swig_lua_class _wrap_class_TByteVector = { "TByteVector", "TByteVector", &SWIGTYPE_p_std__vectorT_unsigned_char_t,_proxy__wrap_new_TByteVector, swig_delete_TByteVector, swig_TByteVector_methods, swig_TByteVector_attributes, &swig_TByteVector_Sf_SwigStatic, swig_TByteVector_meta, swig_TByteVector_bases, swig_TByteVector_base_names };

static int _wrap_new_TServerInfoList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",0,0)
  {
    try {
      result = (std::vector< shared_ptr< adchpp::ServerInfo > > *)new std::vector< shared_ptr< adchpp::ServerInfo > >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TServerInfoList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< shared_ptr< adchpp::ServerInfo > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  {
    try {
      result = (std::vector< shared_ptr< adchpp::ServerInfo > > *)new std::vector< shared_ptr< adchpp::ServerInfo > >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TServerInfoList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = 0 ;
  std::vector< shared_ptr< adchpp::ServerInfo > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",1,"std::vector< shared_ptr< adchpp::ServerInfo > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("new_TServerInfoList",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      result = (std::vector< shared_ptr< adchpp::ServerInfo > > *)new std::vector< shared_ptr< adchpp::ServerInfo > >((std::vector< shared_ptr< adchpp::ServerInfo > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TServerInfoList__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  shared_ptr< adchpp::ServerInfo > arg2 ;
  shared_ptr< adchpp::ServerInfo > *argp2 ;
  std::vector< shared_ptr< adchpp::ServerInfo > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::vector",2,"shared_ptr< adchpp::ServerInfo >");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("new_TServerInfoList",2,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  arg2 = *argp2;
  
  {
    try {
      result = (std::vector< shared_ptr< adchpp::ServerInfo > > *)new std::vector< shared_ptr< adchpp::ServerInfo > >(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TServerInfoList(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TServerInfoList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TServerInfoList__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TServerInfoList__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_TServerInfoList__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TServerInfoList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< shared_ptr< adchpp::ServerInfo > >::vector()\n"
    "    std::vector< shared_ptr< adchpp::ServerInfo > >::vector(unsigned int)\n"
    "    std::vector< shared_ptr< adchpp::ServerInfo > >::vector(std::vector< shared_ptr< adchpp::ServerInfo > > const &)\n"
    "    std::vector< shared_ptr< adchpp::ServerInfo > >::vector(unsigned int,shared_ptr< adchpp::ServerInfo >)\n");
  lua_error(L);return 0;
}


static int _wrap_TServerInfoList_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::size",1,"std::vector< shared_ptr< adchpp::ServerInfo > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_size",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< shared_ptr< adchpp::ServerInfo > > const *)arg1)->size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::max_size",1,"std::vector< shared_ptr< adchpp::ServerInfo > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_max_size",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      result = (unsigned int)((std::vector< shared_ptr< adchpp::ServerInfo > > const *)arg1)->max_size();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::empty",1,"std::vector< shared_ptr< adchpp::ServerInfo > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_empty",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      result = (bool)((std::vector< shared_ptr< adchpp::ServerInfo > > const *)arg1)->empty();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::clear",1,"std::vector< shared_ptr< adchpp::ServerInfo > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_clear",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      (arg1)->clear();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  shared_ptr< adchpp::ServerInfo > arg2 ;
  shared_ptr< adchpp::ServerInfo > *argp2 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::push_back",1,"std::vector< shared_ptr< adchpp::ServerInfo > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::push_back",2,"shared_ptr< adchpp::ServerInfo >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_push_back",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoList_push_back",2,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  arg2 = *argp2;
  
  {
    try {
      (arg1)->push_back(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::pop_back",1,"std::vector< shared_ptr< adchpp::ServerInfo > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_pop_back",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      (arg1)->pop_back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  shared_ptr< adchpp::ServerInfo > result;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::front",1,"std::vector< shared_ptr< adchpp::ServerInfo > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_front",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      result = ((std::vector< shared_ptr< adchpp::ServerInfo > > const *)arg1)->front();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::ServerInfo > * resultptr = new shared_ptr< adchpp::ServerInfo >((const shared_ptr< adchpp::ServerInfo > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  shared_ptr< adchpp::ServerInfo > result;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::back",1,"std::vector< shared_ptr< adchpp::ServerInfo > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList_back",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      result = ((std::vector< shared_ptr< adchpp::ServerInfo > > const *)arg1)->back();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::ServerInfo > * resultptr = new shared_ptr< adchpp::ServerInfo >((const shared_ptr< adchpp::ServerInfo > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  unsigned int arg2 ;
  shared_ptr< adchpp::ServerInfo > result;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::__getitem__",1,"std::vector< shared_ptr< adchpp::ServerInfo > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList___getitem",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  {
    try {
      try {
        result = std_vector_Sl_shared_ptr_Sl_adchpp_ServerInfo_Sg__Sg____getitem__(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::ServerInfo > * resultptr = new shared_ptr< adchpp::ServerInfo >((const shared_ptr< adchpp::ServerInfo > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TServerInfoList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) 0 ;
  unsigned int arg2 ;
  shared_ptr< adchpp::ServerInfo > arg3 ;
  shared_ptr< adchpp::ServerInfo > *argp3 ;
  
  SWIG_check_num_args("std::vector< shared_ptr< adchpp::ServerInfo > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::__setitem__",1,"std::vector< shared_ptr< adchpp::ServerInfo > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< shared_ptr< adchpp::ServerInfo > >::__setitem__",3,"shared_ptr< adchpp::ServerInfo >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("TServerInfoList___setitem",1,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,0))){
    SWIG_fail_ptr("TServerInfoList___setitem",3,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t);
  }
  arg3 = *argp3;
  
  {
    try {
      try {
        std_vector_Sl_shared_ptr_Sl_adchpp_ServerInfo_Sg__Sg____setitem__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception(SWIG_IndexError, (&_e)->what());
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TServerInfoList(void *obj) {
std::vector< shared_ptr< adchpp::ServerInfo > > *arg1 = (std::vector< shared_ptr< adchpp::ServerInfo > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_TServerInfoList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TServerInfoList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TServerInfoList_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TServerInfoList_methods[]= {
    { "size", _wrap_TServerInfoList_size},
    { "max_size", _wrap_TServerInfoList_max_size},
    { "empty", _wrap_TServerInfoList_empty},
    { "clear", _wrap_TServerInfoList_clear},
    { "push_back", _wrap_TServerInfoList_push_back},
    { "pop_back", _wrap_TServerInfoList_pop_back},
    { "front", _wrap_TServerInfoList_front},
    { "back", _wrap_TServerInfoList_back},
    { "__getitem", _wrap_TServerInfoList___getitem},
    { "__setitem", _wrap_TServerInfoList___setitem},
    {0,0}
};
static swig_lua_method swig_TServerInfoList_meta[] = {
    { "__getitem", _wrap_TServerInfoList___getitem},
    { "__setitem", _wrap_TServerInfoList___setitem},
    {0,0}
};

static swig_lua_attribute swig_TServerInfoList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TServerInfoList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TServerInfoList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TServerInfoList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TServerInfoList_Sf_SwigStatic = {
    "TServerInfoList",
    swig_TServerInfoList_Sf_SwigStatic_methods,
    swig_TServerInfoList_Sf_SwigStatic_attributes,
    swig_TServerInfoList_Sf_SwigStatic_constants,
    swig_TServerInfoList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TServerInfoList_bases[] = {0};
static const char *swig_TServerInfoList_base_names[] = {0};
static swig_lua_class _wrap_class_TServerInfoList = { "TServerInfoList", "TServerInfoList", &SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,_proxy__wrap_new_TServerInfoList, swig_delete_TServerInfoList, swig_TServerInfoList_methods, swig_TServerInfoList_attributes, &swig_TServerInfoList_Sf_SwigStatic, swig_TServerInfoList_meta, swig_TServerInfoList_bases, swig_TServerInfoList_base_names };

static int _wrap_TLSInfo_cert_set(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TLSInfo::cert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::cert",1,"TLSInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TLSInfo::cert",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_cert_set",1,SWIGTYPE_p_TLSInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->cert = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_cert_get(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TLSInfo::cert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::cert",1,"TLSInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_cert_get",1,SWIGTYPE_p_TLSInfo);
  }
  
  result = (std::string *) & ((arg1)->cert);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_pkey_set(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TLSInfo::pkey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::pkey",1,"TLSInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TLSInfo::pkey",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_pkey_set",1,SWIGTYPE_p_TLSInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->pkey = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_pkey_get(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TLSInfo::pkey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::pkey",1,"TLSInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_pkey_get",1,SWIGTYPE_p_TLSInfo);
  }
  
  result = (std::string *) & ((arg1)->pkey);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_trustedPath_set(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TLSInfo::trustedPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::trustedPath",1,"TLSInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TLSInfo::trustedPath",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_trustedPath_set",1,SWIGTYPE_p_TLSInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->trustedPath = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_trustedPath_get(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TLSInfo::trustedPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::trustedPath",1,"TLSInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_trustedPath_get",1,SWIGTYPE_p_TLSInfo);
  }
  
  result = (std::string *) & ((arg1)->trustedPath);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_dh_set(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TLSInfo::dh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::dh",1,"TLSInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TLSInfo::dh",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_dh_set",1,SWIGTYPE_p_TLSInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->dh = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLSInfo_dh_get(lua_State* L) {
  int SWIG_arg = 0;
  TLSInfo *arg1 = (TLSInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TLSInfo::dh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TLSInfo::dh",1,"TLSInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("TLSInfo_dh_get",1,SWIGTYPE_p_TLSInfo);
  }
  
  result = (std::string *) & ((arg1)->dh);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TLSInfo(void *obj) {
TLSInfo *arg1 = (TLSInfo *) obj;
delete arg1;
}
static swig_lua_attribute swig_TLSInfo_attributes[] = {
    { "cert", _wrap_TLSInfo_cert_get, _wrap_TLSInfo_cert_set },
    { "pkey", _wrap_TLSInfo_pkey_get, _wrap_TLSInfo_pkey_set },
    { "trustedPath", _wrap_TLSInfo_trustedPath_get, _wrap_TLSInfo_trustedPath_set },
    { "dh", _wrap_TLSInfo_dh_get, _wrap_TLSInfo_dh_set },
    {0,0,0}
};
static swig_lua_method swig_TLSInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_TLSInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TLSInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TLSInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TLSInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TLSInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TLSInfo_Sf_SwigStatic = {
    "TLSInfo",
    swig_TLSInfo_Sf_SwigStatic_methods,
    swig_TLSInfo_Sf_SwigStatic_attributes,
    swig_TLSInfo_Sf_SwigStatic_constants,
    swig_TLSInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TLSInfo_bases[] = {0};
static const char *swig_TLSInfo_base_names[] = {0};
static swig_lua_class _wrap_class_TLSInfo = { "TLSInfo", "TLSInfo", &SWIGTYPE_p_TLSInfo,0, swig_delete_TLSInfo, swig_TLSInfo_methods, swig_TLSInfo_attributes, &swig_TLSInfo_Sf_SwigStatic, swig_TLSInfo_meta, swig_TLSInfo_bases, swig_TLSInfo_base_names };

static int _wrap_new_Exception__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Exception *result = 0 ;
  
  SWIG_check_num_args("Exception::Exception",0,0)
  {
    try {
      result = (Exception *)new Exception();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Exception,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Exception__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  Exception *result = 0 ;
  
  SWIG_check_num_args("Exception::Exception",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Exception::Exception",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try {
      result = (Exception *)new Exception((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Exception,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Exception(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Exception__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Exception__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Exception'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exception::Exception()\n"
    "    Exception::Exception(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Exception_getError(lua_State* L) {
  int SWIG_arg = 0;
  Exception *arg1 = (Exception *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Exception::getError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Exception::getError",1,"Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Exception,0))){
    SWIG_fail_ptr("Exception_getError",1,SWIGTYPE_p_Exception);
  }
  
  {
    try {
      result = (std::string *) &((Exception const *)arg1)->getError();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_what(lua_State* L) {
  int SWIG_arg = 0;
  Exception *arg1 = (Exception *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Exception::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Exception::what",1,"Exception *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Exception,0))){
    SWIG_fail_ptr("Exception_what",1,SWIGTYPE_p_Exception);
  }
  
  {
    try {
      result = (char *)(arg1)->what();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Exception(void *obj) {
Exception *arg1 = (Exception *) obj;
delete arg1;
}
static int _proxy__wrap_new_Exception(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Exception);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Exception_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Exception_methods[]= {
    { "getError", _wrap_Exception_getError},
    { "what", _wrap_Exception_what},
    {0,0}
};
static swig_lua_method swig_Exception_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Exception_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Exception_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Exception_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Exception_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Exception_Sf_SwigStatic = {
    "Exception",
    swig_Exception_Sf_SwigStatic_methods,
    swig_Exception_Sf_SwigStatic_attributes,
    swig_Exception_Sf_SwigStatic_constants,
    swig_Exception_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Exception_bases[] = {0};
static const char *swig_Exception_base_names[] = {0};
static swig_lua_class _wrap_class_Exception = { "Exception", "Exception", &SWIGTYPE_p_Exception,_proxy__wrap_new_Exception, swig_delete_Exception, swig_Exception_methods, swig_Exception_attributes, &swig_Exception_Sf_SwigStatic, swig_Exception_meta, swig_Exception_bases, swig_Exception_base_names };

static int _wrap_new_SimpleXML(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::SimpleXML",0,0)
  {
    try {
      result = (SimpleXML *)new SimpleXML();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleXML,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_addTag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("SimpleXML::addTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::addTag",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::addTag",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SimpleXML::addTag",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_addTag",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      (arg1)->addTag((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_addTag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("SimpleXML::addTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::addTag",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::addTag",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_addTag",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      (arg1)->addTag((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_addTag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleXML, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SimpleXML_addTag__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleXML, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SimpleXML_addTag__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SimpleXML_addTag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleXML::addTag(std::string const &,std::string const &)\n"
    "    SimpleXML::addTag(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SimpleXML_addAttrib(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("SimpleXML::addAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::addAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::addAttrib",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SimpleXML::addAttrib",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_addAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      (arg1)->addAttrib((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_addChildAttrib(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("SimpleXML::addChildAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::addChildAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::addChildAttrib",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SimpleXML::addChildAttrib",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_addChildAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      (arg1)->addChildAttrib((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getData(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getData",1,"SimpleXML const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getData",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      result = (std::string *) &((SimpleXML const *)arg1)->getData();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_stepIn(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  
  SWIG_check_num_args("SimpleXML::stepIn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::stepIn",1,"SimpleXML *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_stepIn",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      (arg1)->stepIn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_stepOut(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  
  SWIG_check_num_args("SimpleXML::stepOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::stepOut",1,"SimpleXML *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_stepOut",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      (arg1)->stepOut();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_resetCurrentChild(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  
  SWIG_check_num_args("SimpleXML::resetCurrentChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::resetCurrentChild",1,"SimpleXML *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_resetCurrentChild",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      (arg1)->resetCurrentChild();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_findChild(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("SimpleXML::findChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::findChild",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::findChild",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_findChild",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (bool)(arg1)->findChild((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getChildTag(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::getChildTag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getChildTag",1,"SimpleXML const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getChildTag",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      result = (std::string *) &((SimpleXML const *)arg1)->getChildTag();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getChildData(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::getChildData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getChildData",1,"SimpleXML const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getChildData",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      result = (std::string *) &((SimpleXML const *)arg1)->getChildData();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getChildAttrib__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::getChildAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getChildAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::getChildAttrib",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SimpleXML::getChildAttrib",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getChildAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      result = (std::string *) &(arg1)->getChildAttrib((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getChildAttrib__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::getChildAttrib",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getChildAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::getChildAttrib",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getChildAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (std::string *) &(arg1)->getChildAttrib((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getChildAttrib(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleXML, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SimpleXML_getChildAttrib__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleXML, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SimpleXML_getChildAttrib__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SimpleXML_getChildAttrib'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleXML::getChildAttrib(std::string const &,std::string const &)\n"
    "    SimpleXML::getChildAttrib(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SimpleXML_getIntChildAttrib(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  int result;
  
  SWIG_check_num_args("SimpleXML::getIntChildAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getIntChildAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::getIntChildAttrib",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SimpleXML::getIntChildAttrib",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getIntChildAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      result = (int)(arg1)->getIntChildAttrib((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getInt64ChildAttrib(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  int64_t result;
  
  SWIG_check_num_args("SimpleXML::getInt64ChildAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getInt64ChildAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::getInt64ChildAttrib",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SimpleXML::getInt64ChildAttrib",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getInt64ChildAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      result = (int64_t)(arg1)->getInt64ChildAttrib((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    lua_pushnumber(L, (lua_Number)result); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_getBoolChildAttrib(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("SimpleXML::getBoolChildAttrib",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::getBoolChildAttrib",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::getBoolChildAttrib",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_getBoolChildAttrib",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (bool)(arg1)->getBoolChildAttrib((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_fromXML(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("SimpleXML::fromXML",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::fromXML",1,"SimpleXML *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SimpleXML::fromXML",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_fromXML",1,SWIGTYPE_p_SimpleXML);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      (arg1)->fromXML((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_toXML(lua_State* L) {
  int SWIG_arg = 0;
  SimpleXML *arg1 = (SimpleXML *) 0 ;
  std::string result;
  
  SWIG_check_num_args("SimpleXML::toXML",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleXML::toXML",1,"SimpleXML const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleXML,0))){
    SWIG_fail_ptr("SimpleXML_toXML",1,SWIGTYPE_p_SimpleXML);
  }
  
  {
    try {
      result = ((SimpleXML const *)arg1)->toXML();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_escape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::escape",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SimpleXML::escape",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleXML::escape",2,"std::string &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SimpleXML::escape",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SimpleXML::escape",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleXML::escape",5,"int");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SimpleXML_escape",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (int)lua_tonumber(L, 5);
  {
    try {
      result = (std::string *) &SimpleXML::escape((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_escape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::escape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SimpleXML::escape",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleXML::escape",2,"std::string &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SimpleXML::escape",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SimpleXML::escape",4,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SimpleXML_escape",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  {
    try {
      result = (std::string *) &SimpleXML::escape((std::string const &)*arg1,*arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_escape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SimpleXML::escape",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SimpleXML::escape",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleXML::escape",2,"std::string &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SimpleXML::escape",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SimpleXML_escape",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  {
    try {
      result = (std::string *) &SimpleXML::escape((std::string const &)*arg1,*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_escape(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SimpleXML_escape__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_SimpleXML_escape__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SimpleXML_escape__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SimpleXML_escape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleXML::escape(std::string const &,std::string &,bool,bool,int)\n"
    "    SimpleXML::escape(std::string const &,std::string &,bool,bool)\n"
    "    SimpleXML::escape(std::string const &,std::string &,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_SimpleXML_needsEscape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("SimpleXML::needsEscape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SimpleXML::needsEscape",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SimpleXML::needsEscape",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SimpleXML::needsEscape",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleXML::needsEscape",4,"int");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (int)lua_tonumber(L, 4);
  {
    try {
      result = (bool)SimpleXML::needsEscape((std::string const &)*arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_needsEscape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("SimpleXML::needsEscape",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SimpleXML::needsEscape",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SimpleXML::needsEscape",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SimpleXML::needsEscape",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  {
    try {
      result = (bool)SimpleXML::needsEscape((std::string const &)*arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleXML_needsEscape(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SimpleXML_needsEscape__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SimpleXML_needsEscape__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SimpleXML_needsEscape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleXML::needsEscape(std::string const &,bool,bool,int)\n"
    "    SimpleXML::needsEscape(std::string const &,bool,bool)\n");
  lua_error(L);return 0;
}


static void swig_delete_SimpleXML(void *obj) {
SimpleXML *arg1 = (SimpleXML *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimpleXML(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimpleXML);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimpleXML_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimpleXML_methods[]= {
    { "addTag", _wrap_SimpleXML_addTag},
    { "addAttrib", _wrap_SimpleXML_addAttrib},
    { "addChildAttrib", _wrap_SimpleXML_addChildAttrib},
    { "getData", _wrap_SimpleXML_getData},
    { "stepIn", _wrap_SimpleXML_stepIn},
    { "stepOut", _wrap_SimpleXML_stepOut},
    { "resetCurrentChild", _wrap_SimpleXML_resetCurrentChild},
    { "findChild", _wrap_SimpleXML_findChild},
    { "getChildTag", _wrap_SimpleXML_getChildTag},
    { "getChildData", _wrap_SimpleXML_getChildData},
    { "getChildAttrib", _wrap_SimpleXML_getChildAttrib},
    { "getIntChildAttrib", _wrap_SimpleXML_getIntChildAttrib},
    { "getInt64ChildAttrib", _wrap_SimpleXML_getInt64ChildAttrib},
    { "getBoolChildAttrib", _wrap_SimpleXML_getBoolChildAttrib},
    { "fromXML", _wrap_SimpleXML_fromXML},
    { "toXML", _wrap_SimpleXML_toXML},
    {0,0}
};
static swig_lua_method swig_SimpleXML_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimpleXML_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimpleXML_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimpleXML_Sf_SwigStatic_methods[]= {
    { "escape", _wrap_SimpleXML_escape},
    { "needsEscape", _wrap_SimpleXML_needsEscape},
    {0,0}
};
static swig_lua_class* swig_SimpleXML_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimpleXML_Sf_SwigStatic = {
    "SimpleXML",
    swig_SimpleXML_Sf_SwigStatic_methods,
    swig_SimpleXML_Sf_SwigStatic_attributes,
    swig_SimpleXML_Sf_SwigStatic_constants,
    swig_SimpleXML_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimpleXML_bases[] = {0};
static const char *swig_SimpleXML_base_names[] = {0};
static swig_lua_class _wrap_class_SimpleXML = { "SimpleXML", "SimpleXML", &SWIGTYPE_p_SimpleXML,_proxy__wrap_new_SimpleXML, swig_delete_SimpleXML, swig_SimpleXML_methods, swig_SimpleXML_attributes, &swig_SimpleXML_Sf_SwigStatic, swig_SimpleXML_meta, swig_SimpleXML_bases, swig_SimpleXML_base_names };

static int _wrap_new_TigerHash(lua_State* L) {
  int SWIG_arg = 0;
  TigerHash *result = 0 ;
  
  SWIG_check_num_args("TigerHash::TigerHash",0,0)
  {
    try {
      result = (TigerHash *)new TigerHash();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TigerHash,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TigerHash_update(lua_State* L) {
  int SWIG_arg = 0;
  TigerHash *arg1 = (TigerHash *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TigerHash::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TigerHash::update",1,"TigerHash *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TigerHash::update",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TigerHash,0))){
    SWIG_fail_ptr("TigerHash_update",1,SWIGTYPE_p_TigerHash);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      TigerHash_update(arg1,(std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TigerHash_finalize(lua_State* L) {
  int SWIG_arg = 0;
  TigerHash *arg1 = (TigerHash *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TigerHash::finalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TigerHash::finalize",1,"TigerHash *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TigerHash,0))){
    SWIG_fail_ptr("TigerHash_finalize",1,SWIGTYPE_p_TigerHash);
  }
  
  {
    try {
      result = TigerHash_finalize(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TigerHash(void *obj) {
TigerHash *arg1 = (TigerHash *) obj;
delete arg1;
}
static int _proxy__wrap_new_TigerHash(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TigerHash);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TigerHash_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TigerHash_methods[]= {
    { "update", _wrap_TigerHash_update},
    { "finalize", _wrap_TigerHash_finalize},
    {0,0}
};
static swig_lua_method swig_TigerHash_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TigerHash_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TigerHash_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("BITS", TigerHash::BITS)},
    {SWIG_LUA_CONSTTAB_INT("BYTES", TigerHash::BYTES)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TigerHash_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TigerHash_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TigerHash_Sf_SwigStatic = {
    "TigerHash",
    swig_TigerHash_Sf_SwigStatic_methods,
    swig_TigerHash_Sf_SwigStatic_attributes,
    swig_TigerHash_Sf_SwigStatic_constants,
    swig_TigerHash_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TigerHash_bases[] = {0};
static const char *swig_TigerHash_base_names[] = {0};
static swig_lua_class _wrap_class_TigerHash = { "TigerHash", "TigerHash", &SWIGTYPE_p_TigerHash,_proxy__wrap_new_TigerHash, swig_delete_TigerHash, swig_TigerHash_methods, swig_TigerHash_attributes, &swig_TigerHash_Sf_SwigStatic, swig_TigerHash_meta, swig_TigerHash_bases, swig_TigerHash_base_names };

static int _wrap_appName_set(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("adchpp::appName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::appName",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  adchpp::appName = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_appName_get(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::appName",0,0)
  result = (std::string *) &adchpp::appName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_versionString_set(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("adchpp::versionString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::versionString",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  adchpp::versionString = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_versionString_get(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::versionString",0,0)
  result = (std::string *) &adchpp::versionString;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_versionFloat_set(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("adchpp::versionFloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::versionFloat",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  adchpp::versionFloat = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_versionFloat_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("adchpp::versionFloat",0,0)
  result = (float)adchpp::versionFloat;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buffer_create(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  SwigValueWrapper< shared_ptr< adchpp::Buffer > > result;
  
  SWIG_check_num_args("adchpp::Buffer::adchpp_Buffer_create",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::Buffer::adchpp_Buffer_create",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try {
      result = adchpp_Buffer_create((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::Buffer > * resultptr = new shared_ptr< adchpp::Buffer >((const shared_ptr< adchpp::Buffer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Buffer(void *obj) {
adchpp::Buffer *arg1 = (adchpp::Buffer *) obj;
delete arg1;
}
static swig_lua_attribute swig_Buffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Buffer_methods[]= {
    {0,0}
};
static swig_lua_method swig_Buffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Buffer_Sf_SwigStatic_methods[]= {
    { "create", _wrap_Buffer_create},
    {0,0}
};
static swig_lua_class* swig_Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Buffer_Sf_SwigStatic = {
    "Buffer",
    swig_Buffer_Sf_SwigStatic_methods,
    swig_Buffer_Sf_SwigStatic_attributes,
    swig_Buffer_Sf_SwigStatic_constants,
    swig_Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Buffer_bases[] = {0};
static const char *swig_Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_Buffer = { "Buffer", "Buffer", &SWIGTYPE_p_adchpp__Buffer,0, swig_delete_Buffer, swig_Buffer_methods, swig_Buffer_attributes, &swig_Buffer_Sf_SwigStatic, swig_Buffer_meta, swig_Buffer_bases, swig_Buffer_base_names };

static int _wrap_ManagedConnection_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ManagedConnection *arg1 = (adchpp::ManagedConnection *) 0 ;
  
  SWIG_check_num_args("adchpp::ManagedConnection::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ManagedConnection::disconnect",1,"adchpp::ManagedConnection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ManagedConnection,0))){
    SWIG_fail_ptr("ManagedConnection_disconnect",1,SWIGTYPE_p_adchpp__ManagedConnection);
  }
  
  {
    try {
      (arg1)->disconnect();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagedConnection_release(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ManagedConnection *arg1 = (adchpp::ManagedConnection *) 0 ;
  
  SWIG_check_num_args("adchpp::ManagedConnection::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ManagedConnection::release",1,"adchpp::ManagedConnection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ManagedConnection,0))){
    SWIG_fail_ptr("ManagedConnection_release",1,SWIGTYPE_p_adchpp__ManagedConnection);
  }
  
  {
    try {
      (arg1)->release();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagedConnection(void *obj) {
adchpp::ManagedConnection *arg1 = (adchpp::ManagedConnection *) obj;
delete arg1;
}
static swig_lua_attribute swig_ManagedConnection_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ManagedConnection_methods[]= {
    { "disconnect", _wrap_ManagedConnection_disconnect},
    { "release", _wrap_ManagedConnection_release},
    {0,0}
};
static swig_lua_method swig_ManagedConnection_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagedConnection_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagedConnection_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagedConnection_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ManagedConnection_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagedConnection_Sf_SwigStatic = {
    "ManagedConnection",
    swig_ManagedConnection_Sf_SwigStatic_methods,
    swig_ManagedConnection_Sf_SwigStatic_attributes,
    swig_ManagedConnection_Sf_SwigStatic_constants,
    swig_ManagedConnection_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagedConnection_bases[] = {0};
static const char *swig_ManagedConnection_base_names[] = {0};
static swig_lua_class _wrap_class_ManagedConnection = { "ManagedConnection", "ManagedConnection", &SWIGTYPE_p_adchpp__ManagedConnection,0, swig_delete_ManagedConnection, swig_ManagedConnection_methods, swig_ManagedConnection_attributes, &swig_ManagedConnection_Sf_SwigStatic, swig_ManagedConnection_meta, swig_ManagedConnection_bases, swig_ManagedConnection_base_names };

static int _wrap_ServerInfo_bind4_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind4",1,"adchpp::ServerInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::bind4",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_bind4_set",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->bind4 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_bind4_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind4",1,"adchpp::ServerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_bind4_get",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  result = (std::string *) & ((arg1)->bind4);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_bind6_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind6",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind6",1,"adchpp::ServerInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::bind6",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_bind6_set",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->bind6 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_bind6_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::bind6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::bind6",1,"adchpp::ServerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_bind6_get",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  result = (std::string *) & ((arg1)->bind6);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_address4_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address4",1,"adchpp::ServerInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::address4",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_address4_set",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->address4 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_address4_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address4",1,"adchpp::ServerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_address4_get",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  result = (std::string *) & ((arg1)->address4);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_address6_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address6",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address6",1,"adchpp::ServerInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::address6",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_address6_set",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->address6 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_address6_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::address6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::address6",1,"adchpp::ServerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_address6_get",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  result = (std::string *) & ((arg1)->address6);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_port_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::port",1,"adchpp::ServerInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ServerInfo::port",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_port_set",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->port = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_port_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::port",1,"adchpp::ServerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_port_get",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  result = (std::string *) & ((arg1)->port);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_TLSParams_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  TLSInfo *arg2 = (TLSInfo *) 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::TLSParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::TLSParams",1,"adchpp::ServerInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("adchpp::ServerInfo::TLSParams",2,"TLSInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_TLSParams_set",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TLSInfo,0))){
    SWIG_fail_ptr("ServerInfo_TLSParams_set",2,SWIGTYPE_p_TLSInfo);
  }
  
  if (arg1) (arg1)->TLSParams = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_TLSParams_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  TLSInfo *result = 0 ;
  
  SWIG_check_num_args("adchpp::ServerInfo::TLSParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::TLSParams",1,"adchpp::ServerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_TLSParams_get",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  result = (TLSInfo *)& ((arg1)->TLSParams);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TLSInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_secure(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ServerInfo::secure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ServerInfo::secure",1,"adchpp::ServerInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ServerInfo,0))){
    SWIG_fail_ptr("ServerInfo_secure",1,SWIGTYPE_p_adchpp__ServerInfo);
  }
  
  {
    try {
      result = (bool)((adchpp::ServerInfo const *)arg1)->secure();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerInfo_create(lua_State* L) {
  int SWIG_arg = 0;
  shared_ptr< adchpp::ServerInfo > result;
  
  SWIG_check_num_args("adchpp::ServerInfo::adchpp_ServerInfo_create",0,0)
  {
    try {
      result = adchpp_ServerInfo_create();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::ServerInfo > * resultptr = new shared_ptr< adchpp::ServerInfo >((const shared_ptr< adchpp::ServerInfo > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ServerInfo_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ServerInfo(void *obj) {
adchpp::ServerInfo *arg1 = (adchpp::ServerInfo *) obj;
delete arg1;
}
static swig_lua_attribute swig_ServerInfo_attributes[] = {
    { "bind4", _wrap_ServerInfo_bind4_get, _wrap_ServerInfo_bind4_set },
    { "bind6", _wrap_ServerInfo_bind6_get, _wrap_ServerInfo_bind6_set },
    { "address4", _wrap_ServerInfo_address4_get, _wrap_ServerInfo_address4_set },
    { "address6", _wrap_ServerInfo_address6_get, _wrap_ServerInfo_address6_set },
    { "port", _wrap_ServerInfo_port_get, _wrap_ServerInfo_port_set },
    { "TLSParams", _wrap_ServerInfo_TLSParams_get, _wrap_ServerInfo_TLSParams_set },
    {0,0,0}
};
static swig_lua_method swig_ServerInfo_methods[]= {
    { "secure", _wrap_ServerInfo_secure},
    {0,0}
};
static swig_lua_method swig_ServerInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ServerInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ServerInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ServerInfo_Sf_SwigStatic_methods[]= {
    { "create", _wrap_ServerInfo_create},
    {0,0}
};
static swig_lua_class* swig_ServerInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ServerInfo_Sf_SwigStatic = {
    "ServerInfo",
    swig_ServerInfo_Sf_SwigStatic_methods,
    swig_ServerInfo_Sf_SwigStatic_attributes,
    swig_ServerInfo_Sf_SwigStatic_constants,
    swig_ServerInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ServerInfo_bases[] = {0};
static const char *swig_ServerInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ServerInfo = { "ServerInfo", "ServerInfo", &SWIGTYPE_p_adchpp__ServerInfo,0, swig_delete_ServerInfo, swig_ServerInfo_methods, swig_ServerInfo_attributes, &swig_ServerInfo_Sf_SwigStatic, swig_ServerInfo_meta, swig_ServerInfo_bases, swig_ServerInfo_base_names };

static int _wrap_new_SocketStats(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *result = 0 ;
  
  SWIG_check_num_args("adchpp::SocketStats::SocketStats",0,0)
  {
    try {
      result = (adchpp::SocketStats *)new adchpp::SocketStats();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SocketStats,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_queueCalls_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketStats::queueCalls",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::queueCalls",1,"adchpp::SocketStats *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketStats::queueCalls",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_queueCalls_set",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->queueCalls = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_queueCalls_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::SocketStats::queueCalls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::queueCalls",1,"adchpp::SocketStats *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_queueCalls_get",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  result = (size_t) ((arg1)->queueCalls);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_queueBytes_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketStats::queueBytes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::queueBytes",1,"adchpp::SocketStats *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketStats::queueBytes",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_queueBytes_set",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  {
    arg2 = (int64_t)lua_tonumber(L,2);
  }
  if (arg1) (arg1)->queueBytes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_queueBytes_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("adchpp::SocketStats::queueBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::queueBytes",1,"adchpp::SocketStats *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_queueBytes_get",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  result = (int64_t) ((arg1)->queueBytes);
  {
    lua_pushnumber(L, (lua_Number)result); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_sendCalls_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketStats::sendCalls",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::sendCalls",1,"adchpp::SocketStats *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketStats::sendCalls",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_sendCalls_set",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->sendCalls = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_sendCalls_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::SocketStats::sendCalls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::sendCalls",1,"adchpp::SocketStats *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_sendCalls_get",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  result = (size_t) ((arg1)->sendCalls);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_sendBytes_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketStats::sendBytes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::sendBytes",1,"adchpp::SocketStats *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketStats::sendBytes",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_sendBytes_set",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  {
    arg2 = (int64_t)lua_tonumber(L,2);
  }
  if (arg1) (arg1)->sendBytes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_sendBytes_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("adchpp::SocketStats::sendBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::sendBytes",1,"adchpp::SocketStats *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_sendBytes_get",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  result = (int64_t) ((arg1)->sendBytes);
  {
    lua_pushnumber(L, (lua_Number)result); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_recvCalls_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketStats::recvCalls",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::recvCalls",1,"adchpp::SocketStats *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketStats::recvCalls",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_recvCalls_set",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  {
    arg2 = (int64_t)lua_tonumber(L,2);
  }
  if (arg1) (arg1)->recvCalls = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_recvCalls_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("adchpp::SocketStats::recvCalls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::recvCalls",1,"adchpp::SocketStats *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_recvCalls_get",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  result = (int64_t) ((arg1)->recvCalls);
  {
    lua_pushnumber(L, (lua_Number)result); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_recvBytes_set(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketStats::recvBytes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::recvBytes",1,"adchpp::SocketStats *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketStats::recvBytes",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_recvBytes_set",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  {
    arg2 = (int64_t)lua_tonumber(L,2);
  }
  if (arg1) (arg1)->recvBytes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketStats_recvBytes_get(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketStats *arg1 = (adchpp::SocketStats *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("adchpp::SocketStats::recvBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketStats::recvBytes",1,"adchpp::SocketStats *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketStats,0))){
    SWIG_fail_ptr("SocketStats_recvBytes_get",1,SWIGTYPE_p_adchpp__SocketStats);
  }
  
  result = (int64_t) ((arg1)->recvBytes);
  {
    lua_pushnumber(L, (lua_Number)result); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SocketStats(void *obj) {
adchpp::SocketStats *arg1 = (adchpp::SocketStats *) obj;
delete arg1;
}
static int _proxy__wrap_new_SocketStats(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SocketStats);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SocketStats_attributes[] = {
    { "queueCalls", _wrap_SocketStats_queueCalls_get, _wrap_SocketStats_queueCalls_set },
    { "queueBytes", _wrap_SocketStats_queueBytes_get, _wrap_SocketStats_queueBytes_set },
    { "sendCalls", _wrap_SocketStats_sendCalls_get, _wrap_SocketStats_sendCalls_set },
    { "sendBytes", _wrap_SocketStats_sendBytes_get, _wrap_SocketStats_sendBytes_set },
    { "recvCalls", _wrap_SocketStats_recvCalls_get, _wrap_SocketStats_recvCalls_set },
    { "recvBytes", _wrap_SocketStats_recvBytes_get, _wrap_SocketStats_recvBytes_set },
    {0,0,0}
};
static swig_lua_method swig_SocketStats_methods[]= {
    {0,0}
};
static swig_lua_method swig_SocketStats_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SocketStats_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SocketStats_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SocketStats_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SocketStats_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SocketStats_Sf_SwigStatic = {
    "SocketStats",
    swig_SocketStats_Sf_SwigStatic_methods,
    swig_SocketStats_Sf_SwigStatic_attributes,
    swig_SocketStats_Sf_SwigStatic_constants,
    swig_SocketStats_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SocketStats_bases[] = {0};
static const char *swig_SocketStats_base_names[] = {0};
static swig_lua_class _wrap_class_SocketStats = { "SocketStats", "SocketStats", &SWIGTYPE_p_adchpp__SocketStats,_proxy__wrap_new_SocketStats, swig_delete_SocketStats, swig_SocketStats_methods, swig_SocketStats_attributes, &swig_SocketStats_Sf_SwigStatic, swig_SocketStats_meta, swig_SocketStats_bases, swig_SocketStats_base_names };

static int _wrap_SocketManager_addJob(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  long arg2 ;
  adchpp::SocketManager::Callback arg3 ;
  
  SWIG_check_num_args("adchpp::SocketManager::addJob",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::addJob",1,"adchpp::SocketManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketManager::addJob",2,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_addJob",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  {
    arg3 = LuaFunction(L);
  }
  {
    try {
      adchpp_SocketManager_addJob(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_addJob_str(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  std::string *arg2 = 0 ;
  adchpp::SocketManager::Callback arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::SocketManager::addJob_str",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::addJob_str",1,"adchpp::SocketManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::SocketManager::addJob_str",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_addJob_str",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    arg3 = LuaFunction(L);
  }
  {
    try {
      adchpp_SocketManager_addJob_str(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_addTimedJob(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  long arg2 ;
  adchpp::SocketManager::Callback arg3 ;
  adchpp::SocketManager::Callback result;
  
  SWIG_check_num_args("adchpp::SocketManager::addTimedJob",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::addTimedJob",1,"adchpp::SocketManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketManager::addTimedJob",2,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_addTimedJob",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  {
    arg3 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_SocketManager_addTimedJob(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    SWIG_NewPointerObj(L, new std::function<void ()>(result), SWIGTYPE_p_std__functionT_void_fF_t, 1);
    lua_pushcclosure(L, exec, 1);
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_addTimedJob_str(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  std::string *arg2 = 0 ;
  adchpp::SocketManager::Callback arg3 ;
  std::string temp2 ;
  adchpp::SocketManager::Callback result;
  
  SWIG_check_num_args("adchpp::SocketManager::addTimedJob_str",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::addTimedJob_str",1,"adchpp::SocketManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::SocketManager::addTimedJob_str",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_addTimedJob_str",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    arg3 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_SocketManager_addTimedJob_str(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    SWIG_NewPointerObj(L, new std::function<void ()>(result), SWIGTYPE_p_std__functionT_void_fF_t, 1);
    lua_pushcclosure(L, exec, 1);
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_setBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketManager::setBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::setBufferSize",1,"adchpp::SocketManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketManager::setBufferSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_setBufferSize",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setBufferSize(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_getBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::SocketManager::getBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::getBufferSize",1,"adchpp::SocketManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_getBufferSize",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  {
    try {
      result = (size_t)((adchpp::SocketManager const *)arg1)->getBufferSize();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_setMaxBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketManager::setMaxBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::setMaxBufferSize",1,"adchpp::SocketManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketManager::setMaxBufferSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_setMaxBufferSize",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setMaxBufferSize(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_getMaxBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::SocketManager::getMaxBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::getMaxBufferSize",1,"adchpp::SocketManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_getMaxBufferSize",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  {
    try {
      result = (size_t)((adchpp::SocketManager const *)arg1)->getMaxBufferSize();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_setOverflowTimeout(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketManager::setOverflowTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::setOverflowTimeout",1,"adchpp::SocketManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketManager::setOverflowTimeout",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_setOverflowTimeout",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setOverflowTimeout(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_getOverflowTimeout(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::SocketManager::getOverflowTimeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::getOverflowTimeout",1,"adchpp::SocketManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_getOverflowTimeout",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  {
    try {
      result = (size_t)((adchpp::SocketManager const *)arg1)->getOverflowTimeout();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_setDisconnectTimeout(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::SocketManager::setDisconnectTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::setDisconnectTimeout",1,"adchpp::SocketManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::SocketManager::setDisconnectTimeout",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_setDisconnectTimeout",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setDisconnectTimeout(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_getDisconnectTimeout(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::SocketManager::getDisconnectTimeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::getDisconnectTimeout",1,"adchpp::SocketManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_getDisconnectTimeout",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  {
    try {
      result = (size_t)((adchpp::SocketManager const *)arg1)->getDisconnectTimeout();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_setServers(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  adchpp::ServerInfoList *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::SocketManager::setServers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::setServers",1,"adchpp::SocketManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::SocketManager::setServers",2,"adchpp::ServerInfoList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_setServers",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,0))){
    SWIG_fail_ptr("SocketManager_setServers",2,SWIGTYPE_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t);
  }
  
  {
    try {
      (arg1)->setServers((adchpp::ServerInfoList const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SocketManager_getStats(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::SocketManager *arg1 = (adchpp::SocketManager *) 0 ;
  adchpp::SocketStats *result = 0 ;
  
  SWIG_check_num_args("adchpp::SocketManager::getStats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::SocketManager::getStats",1,"adchpp::SocketManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SocketManager,0))){
    SWIG_fail_ptr("SocketManager_getStats",1,SWIGTYPE_p_adchpp__SocketManager);
  }
  
  {
    try {
      result = (adchpp::SocketStats *) &(arg1)->getStats();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SocketStats,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SocketManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SocketManager_methods[]= {
    { "addJob", _wrap_SocketManager_addJob},
    { "addJob_str", _wrap_SocketManager_addJob_str},
    { "addTimedJob", _wrap_SocketManager_addTimedJob},
    { "addTimedJob_str", _wrap_SocketManager_addTimedJob_str},
    { "setBufferSize", _wrap_SocketManager_setBufferSize},
    { "getBufferSize", _wrap_SocketManager_getBufferSize},
    { "setMaxBufferSize", _wrap_SocketManager_setMaxBufferSize},
    { "getMaxBufferSize", _wrap_SocketManager_getMaxBufferSize},
    { "setOverflowTimeout", _wrap_SocketManager_setOverflowTimeout},
    { "getOverflowTimeout", _wrap_SocketManager_getOverflowTimeout},
    { "setDisconnectTimeout", _wrap_SocketManager_setDisconnectTimeout},
    { "getDisconnectTimeout", _wrap_SocketManager_getDisconnectTimeout},
    { "setServers", _wrap_SocketManager_setServers},
    { "getStats", _wrap_SocketManager_getStats},
    {0,0}
};
static swig_lua_method swig_SocketManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SocketManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SocketManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SocketManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SocketManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SocketManager_Sf_SwigStatic = {
    "SocketManager",
    swig_SocketManager_Sf_SwigStatic_methods,
    swig_SocketManager_Sf_SwigStatic_attributes,
    swig_SocketManager_Sf_SwigStatic_constants,
    swig_SocketManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SocketManager_bases[] = {0};
static const char *swig_SocketManager_base_names[] = {0};
static swig_lua_class _wrap_class_SocketManager = { "SocketManager", "SocketManager", &SWIGTYPE_p_adchpp__SocketManager,0,0, swig_SocketManager_methods, swig_SocketManager_attributes, &swig_SocketManager_Sf_SwigStatic, swig_SocketManager_meta, swig_SocketManager_bases, swig_SocketManager_base_names };

static int _wrap_new_CID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *result = 0 ;
  
  SWIG_check_num_args("adchpp::CID::CID",0,0)
  {
    try {
      result = (adchpp::CID *)new adchpp::CID();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__CID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *arg1 = (uint8_t *) 0 ;
  adchpp::CID *result = 0 ;
  
  SWIG_check_num_args("adchpp::CID::CID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::CID",1,"uint8_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("new_CID",1,SWIGTYPE_p_unsigned_char);
  }
  
  {
    try {
      result = (adchpp::CID *)new adchpp::CID((uint8_t const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__CID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CID__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  adchpp::CID *result = 0 ;
  
  SWIG_check_num_args("adchpp::CID::CID",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::CID::CID",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try {
      result = (adchpp::CID *)new adchpp::CID((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__CID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CID(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CID__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CID__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CID__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::CID::CID()\n"
    "    adchpp::CID::CID(uint8_t const *)\n"
    "    adchpp::CID::CID(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CID___eq(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  adchpp::CID *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::CID::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::operator ==",1,"adchpp::CID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::CID::operator ==",2,"adchpp::CID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID___eq",1,SWIGTYPE_p_adchpp__CID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID___eq",2,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = (bool)((adchpp::CID const *)arg1)->operator ==((adchpp::CID const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID___lt(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  adchpp::CID *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::CID::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::operator <",1,"adchpp::CID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::CID::operator <",2,"adchpp::CID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID___lt",1,SWIGTYPE_p_adchpp__CID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID___lt",2,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = (bool)((adchpp::CID const *)arg1)->operator <((adchpp::CID const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID_toBase32(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::CID::toBase32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::toBase32",1,"adchpp::CID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID_toBase32",1,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = ((adchpp::CID const *)arg1)->toBase32();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID_toHash(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::CID::toHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::toHash",1,"adchpp::CID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID_toHash",1,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = (size_t)((adchpp::CID const *)arg1)->toHash();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID_data(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::CID::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::data",1,"adchpp::CID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID_data",1,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = adchpp_CID_data((adchpp::CID const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID___tostring(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::CID::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::__str__",1,"adchpp::CID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID___tostring",1,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = adchpp_CID___str__(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID_isZero(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID *arg1 = (adchpp::CID *) 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::CID::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::CID::isZero",1,"adchpp::CID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("CID_isZero",1,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = (bool)((adchpp::CID const *)arg1)->isZero();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CID_generate(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::CID result;
  
  SWIG_check_num_args("adchpp::CID::generate",0,0)
  {
    try {
      result = adchpp::CID::generate();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::CID * resultptr = new adchpp::CID((const adchpp::CID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_adchpp__CID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CID(void *obj) {
adchpp::CID *arg1 = (adchpp::CID *) obj;
delete arg1;
}
static int _proxy__wrap_new_CID(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CID);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CID_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CID_methods[]= {
    { "__eq", _wrap_CID___eq},
    { "__lt", _wrap_CID___lt},
    { "toBase32", _wrap_CID_toBase32},
    { "toHash", _wrap_CID_toHash},
    { "data", _wrap_CID_data},
    { "__tostring", _wrap_CID___tostring},
    { "isZero", _wrap_CID_isZero},
    {0,0}
};
static swig_lua_method swig_CID_meta[] = {
    { "__eq", _wrap_CID___eq},
    { "__lt", _wrap_CID___lt},
    { "__tostring", _wrap_CID___tostring},
    {0,0}
};

static swig_lua_attribute swig_CID_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CID_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SIZE", adchpp::CID::SIZE)},
    {SWIG_LUA_CONSTTAB_INT("BASE32_SIZE", adchpp::CID::BASE32_SIZE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CID_Sf_SwigStatic_methods[]= {
    { "generate", _wrap_CID_generate},
    {0,0}
};
static swig_lua_class* swig_CID_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CID_Sf_SwigStatic = {
    "CID",
    swig_CID_Sf_SwigStatic_methods,
    swig_CID_Sf_SwigStatic_attributes,
    swig_CID_Sf_SwigStatic_constants,
    swig_CID_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CID_bases[] = {0};
static const char *swig_CID_base_names[] = {0};
static swig_lua_class _wrap_class_CID = { "CID", "CID", &SWIGTYPE_p_adchpp__CID,_proxy__wrap_new_CID, swig_delete_CID, swig_CID_methods, swig_CID_attributes, &swig_CID_Sf_SwigStatic, swig_CID_meta, swig_CID_bases, swig_CID_base_names };

static int _wrap_AdcCommand_HUB_SID_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::HUB_SID",0,0)
  result = (uint32_t)(uint32_t)adchpp::AdcCommand::HUB_SID;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_INVALID_SID_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::INVALID_SID",0,0)
  result = (uint32_t)(uint32_t)adchpp::AdcCommand::INVALID_SID;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AdcCommand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::AdcCommand",0,0)
  {
    try {
      result = (adchpp::AdcCommand *)new adchpp::AdcCommand();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AdcCommand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand::Severity arg1 ;
  adchpp::AdcCommand::Error arg2 ;
  std::string *arg3 = 0 ;
  char arg4 ;
  std::string temp3 ;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::AdcCommand",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",1,"adchpp::AdcCommand::Severity");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",2,"adchpp::AdcCommand::Error");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",3,"std::string const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",4,"char");
  arg1 = (adchpp::AdcCommand::Severity)(int)lua_tonumber(L, 1);
  arg2 = (adchpp::AdcCommand::Error)(int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (lua_tostring(L, 4))[0];
  {
    try {
      result = (adchpp::AdcCommand *)new adchpp::AdcCommand(arg1,arg2,(std::string const &)*arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AdcCommand__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  char arg2 ;
  uint32_t arg3 ;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::AdcCommand",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",1,"uint32_t");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",3,"uint32_t");
  {
    arg1 = (uint32_t)lua_tonumber(L,1);
  }
  arg2 = (lua_tostring(L, 2))[0];
  {
    arg3 = (uint32_t)lua_tonumber(L,3);
  }
  {
    try {
      result = (adchpp::AdcCommand *)new adchpp::AdcCommand(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AdcCommand__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::AdcCommand",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try {
      try {
        result = (adchpp::AdcCommand *)new adchpp::AdcCommand((std::string const &)*arg1);
      } catch(ParseException &_e) {
        (void)_e; /* ignore it */
        lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_ParseException));
        SWIG_fail;
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AdcCommand__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::BufferPtr *arg1 = 0 ;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::AdcCommand",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("adchpp::AdcCommand::AdcCommand",1,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("new_AdcCommand",1,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      try {
        result = (adchpp::AdcCommand *)new adchpp::AdcCommand((adchpp::BufferPtr const &)*arg1);
      } catch(ParseException &_e) {
        (void)_e; /* ignore it */
        lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_ParseException));
        SWIG_fail;
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AdcCommand(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AdcCommand__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AdcCommand__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AdcCommand__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_AdcCommand__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_new_AdcCommand__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AdcCommand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::AdcCommand::AdcCommand()\n"
    "    adchpp::AdcCommand::AdcCommand(adchpp::AdcCommand::Severity,adchpp::AdcCommand::Error,std::string const &,char)\n"
    "    adchpp::AdcCommand::AdcCommand(uint32_t,char,uint32_t)\n"
    "    adchpp::AdcCommand::AdcCommand(std::string const &)\n"
    "    adchpp::AdcCommand::AdcCommand(adchpp::BufferPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AdcCommand_toSID(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::toSID",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::AdcCommand::toSID",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try {
      result = (uint32_t)adchpp::AdcCommand::toSID((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_fromSID(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::fromSID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::AdcCommand::fromSID",1,"uint32_t const");
  {
    arg1 = (uint32_t)lua_tonumber(L,1);
  }
  {
    try {
      result = adchpp::AdcCommand::fromSID(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_appendSID(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::appendSID",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("adchpp::AdcCommand::appendSID",1,"std::string &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::appendSID",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("AdcCommand_appendSID",1,SWIGTYPE_p_std__string);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      adchpp::AdcCommand::appendSID(*arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_toCMD__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::toCMD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::AdcCommand::toCMD",1,"uint8_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::toCMD",2,"uint8_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::AdcCommand::toCMD",3,"uint8_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint8_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint8_t)lua_tonumber(L, 3);
  {
    try {
      result = (uint32_t)adchpp::AdcCommand::toCMD(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_toField(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::toField",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("adchpp::AdcCommand::toField",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    try {
      result = (uint16_t)adchpp::AdcCommand::toField((char const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_fromField(lua_State* L) {
  int SWIG_arg = 0;
  uint16_t arg1 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::fromField",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::AdcCommand::fromField",1,"uint16_t const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint16_t const)lua_tonumber(L, 1);
  {
    try {
      result = adchpp::AdcCommand::fromField(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_toFourCC(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::toFourCC",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("adchpp::AdcCommand::toFourCC",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    try {
      result = (uint32_t)adchpp::AdcCommand::toFourCC((char const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_fromFourCC(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::fromFourCC",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("adchpp::AdcCommand::fromFourCC",1,"uint32_t");
  {
    arg1 = (uint32_t)lua_tonumber(L,1);
  }
  {
    try {
      result = adchpp::AdcCommand::fromFourCC(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_parse(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::parse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::parse",1,"adchpp::AdcCommand *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::parse",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_parse",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      try {
        (arg1)->parse((std::string const &)*arg2);
      } catch(ParseException &_e) {
        (void)_e; /* ignore it */
        lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_ParseException));
        SWIG_fail;
      }
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getCommand(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getCommand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getCommand",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getCommand",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (uint32_t)((adchpp::AdcCommand const *)arg1)->getCommand();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getType(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  char result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getType",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getType",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (char)((adchpp::AdcCommand const *)arg1)->getType();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getFourCC(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getFourCC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getFourCC",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getFourCC",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = ((adchpp::AdcCommand const *)arg1)->getFourCC();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  StringList *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getParameters",1,"adchpp::AdcCommand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getParameters",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (StringList *) &(arg1)->getParameters();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_toString(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::toString",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_toString",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = ((adchpp::AdcCommand const *)arg1)->toString();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_resetBuffer(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::resetBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::resetBuffer",1,"adchpp::AdcCommand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_resetBuffer",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->resetBuffer();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_addParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::addParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::addParam",1,"adchpp::AdcCommand *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::addParam",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::AdcCommand::addParam",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_addParam",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      result = (adchpp::AdcCommand *) &(arg1)->addParam((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_addParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  adchpp::AdcCommand *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::addParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::addParam",1,"adchpp::AdcCommand *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::addParam",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_addParam",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (adchpp::AdcCommand *) &(arg1)->addParam((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__AdcCommand,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_addParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AdcCommand_addParam__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AdcCommand_addParam__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AdcCommand_addParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::AdcCommand::addParam(std::string const &,std::string const &)\n"
    "    adchpp::AdcCommand::addParam(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AdcCommand_getParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  size_t arg2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getParam",1,"adchpp::AdcCommand const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::getParam",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getParam",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      result = (std::string *) &((adchpp::AdcCommand const *)arg1)->getParam(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getFeatures(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::getFeatures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getFeatures",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getFeatures",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (std::string *) &((adchpp::AdcCommand const *)arg1)->getFeatures();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getBuffer(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  adchpp::BufferPtr *result = 0 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::getBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getBuffer",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getBuffer",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (adchpp::BufferPtr *) &((adchpp::AdcCommand const *)arg1)->getBuffer();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_delParam(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("adchpp::AdcCommand::delParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::delParam",1,"adchpp::AdcCommand *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::delParam",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::AdcCommand::delParam",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_delParam",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  {
    try {
      result = (bool)(arg1)->delParam((char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_hasFlag(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("adchpp::AdcCommand::hasFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::hasFlag",1,"adchpp::AdcCommand const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::hasFlag",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::AdcCommand::hasFlag",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_hasFlag",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  {
    try {
      result = (bool)((adchpp::AdcCommand const *)arg1)->hasFlag((char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand___eq(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::AdcCommand::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::operator ==",1,"adchpp::AdcCommand const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::operator ==",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand___eq",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      result = (bool)((adchpp::AdcCommand const *)arg1)->operator ==(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_escape(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::escape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::AdcCommand::escape",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::AdcCommand::escape",2,"std::string &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("AdcCommand_escape",2,SWIGTYPE_p_std__string);
  }
  
  {
    try {
      adchpp::AdcCommand::escape((std::string const &)*arg1,*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getTo(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getTo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getTo",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getTo",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (uint32_t)((adchpp::AdcCommand const *)arg1)->getTo();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_setTo(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::setTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::setTo",1,"adchpp::AdcCommand *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::setTo",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_setTo",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      (arg1)->setTo(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getFrom(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getFrom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getFrom",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getFrom",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (uint32_t)((adchpp::AdcCommand const *)arg1)->getFrom();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_setFrom(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::setFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::setFrom",1,"adchpp::AdcCommand *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::setFrom",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_setFrom",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      (arg1)->setFrom(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  adchpp::AdcCommand::Priority result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getPriority",1,"adchpp::AdcCommand const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getPriority",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (adchpp::AdcCommand::Priority)((adchpp::AdcCommand const *)arg1)->getPriority();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_setPriority(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  adchpp::AdcCommand::Priority arg2 ;
  
  SWIG_check_num_args("adchpp::AdcCommand::setPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::setPriority",1,"adchpp::AdcCommand *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::AdcCommand::setPriority",2,"adchpp::AdcCommand::Priority");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_setPriority",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  arg2 = (adchpp::AdcCommand::Priority)(int)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setPriority(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getCommandString(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getCommandString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getCommandString",1,"adchpp::AdcCommand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getCommandString",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = adchpp_AdcCommand_getCommandString(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_toCMD__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::AdcCommand::adchpp_AdcCommand_toCMD__SWIG_1",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("adchpp::AdcCommand::adchpp_AdcCommand_toCMD__SWIG_1",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try {
      result = (uint32_t)adchpp_AdcCommand_toCMD__SWIG_1((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_toCMD(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_AdcCommand_toCMD__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AdcCommand_toCMD__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AdcCommand_toCMD'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::AdcCommand::toCMD(uint8_t,uint8_t,uint8_t)\n"
    "    adchpp::AdcCommand::adchpp_AdcCommand_toCMD__SWIG_1(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AdcCommand_hasParam(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("adchpp::AdcCommand::hasParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::hasParam",1,"adchpp::AdcCommand *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::hasParam",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::AdcCommand::hasParam",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_hasParam",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  {
    try {
      result = (bool)adchpp_AdcCommand_hasParam(arg1,(char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("adchpp::AdcCommand::getParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::AdcCommand::getParam",1,"adchpp::AdcCommand *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::AdcCommand::getParam",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::AdcCommand::getParam",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("AdcCommand_getParam",1,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  {
    try {
      result = adchpp_AdcCommand_getParam__SWIG_1(arg1,(char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdcCommand_getParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AdcCommand_getParam__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AdcCommand_getParam__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AdcCommand_getParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::AdcCommand::getParam(size_t) const\n"
    "    adchpp::AdcCommand::getParam(char const *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_AdcCommand(void *obj) {
adchpp::AdcCommand *arg1 = (adchpp::AdcCommand *) obj;
delete arg1;
}
static int _proxy__wrap_new_AdcCommand(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AdcCommand);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AdcCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AdcCommand_methods[]= {
    { "parse", _wrap_AdcCommand_parse},
    { "getCommand", _wrap_AdcCommand_getCommand},
    { "getType", _wrap_AdcCommand_getType},
    { "getFourCC", _wrap_AdcCommand_getFourCC},
    { "getParameters", _wrap_AdcCommand_getParameters},
    { "toString", _wrap_AdcCommand_toString},
    { "resetBuffer", _wrap_AdcCommand_resetBuffer},
    { "addParam", _wrap_AdcCommand_addParam},
    { "getFeatures", _wrap_AdcCommand_getFeatures},
    { "getBuffer", _wrap_AdcCommand_getBuffer},
    { "delParam", _wrap_AdcCommand_delParam},
    { "hasFlag", _wrap_AdcCommand_hasFlag},
    { "__eq", _wrap_AdcCommand___eq},
    { "getTo", _wrap_AdcCommand_getTo},
    { "setTo", _wrap_AdcCommand_setTo},
    { "getFrom", _wrap_AdcCommand_getFrom},
    { "setFrom", _wrap_AdcCommand_setFrom},
    { "getPriority", _wrap_AdcCommand_getPriority},
    { "setPriority", _wrap_AdcCommand_setPriority},
    { "getCommandString", _wrap_AdcCommand_getCommandString},
    { "hasParam", _wrap_AdcCommand_hasParam},
    { "getParam", _wrap_AdcCommand_getParam},
    {0,0}
};
static swig_lua_method swig_AdcCommand_meta[] = {
    { "__eq", _wrap_AdcCommand___eq},
    {0,0}
};

static swig_lua_attribute swig_AdcCommand_Sf_SwigStatic_attributes[] = {
    { "HUB_SID", _wrap_AdcCommand_HUB_SID_get, SWIG_Lua_set_immutable },
    { "INVALID_SID", _wrap_AdcCommand_INVALID_SID_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_AdcCommand_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ERROR_GENERIC", adchpp::AdcCommand::ERROR_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_HUB_GENERIC", adchpp::AdcCommand::ERROR_HUB_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_HUB_FULL", adchpp::AdcCommand::ERROR_HUB_FULL)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_HUB_DISABLED", adchpp::AdcCommand::ERROR_HUB_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_LOGIN_GENERIC", adchpp::AdcCommand::ERROR_LOGIN_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_NICK_INVALID", adchpp::AdcCommand::ERROR_NICK_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_NICK_TAKEN", adchpp::AdcCommand::ERROR_NICK_TAKEN)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_BAD_PASSWORD", adchpp::AdcCommand::ERROR_BAD_PASSWORD)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_CID_TAKEN", adchpp::AdcCommand::ERROR_CID_TAKEN)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_COMMAND_ACCESS", adchpp::AdcCommand::ERROR_COMMAND_ACCESS)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_REGGED_ONLY", adchpp::AdcCommand::ERROR_REGGED_ONLY)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_INVALID_PID", adchpp::AdcCommand::ERROR_INVALID_PID)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_BANNED_GENERIC", adchpp::AdcCommand::ERROR_BANNED_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_PERM_BANNED", adchpp::AdcCommand::ERROR_PERM_BANNED)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_TEMP_BANNED", adchpp::AdcCommand::ERROR_TEMP_BANNED)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_PROTOCOL_GENERIC", adchpp::AdcCommand::ERROR_PROTOCOL_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_PROTOCOL_UNSUPPORTED", adchpp::AdcCommand::ERROR_PROTOCOL_UNSUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_INF_MISSING", adchpp::AdcCommand::ERROR_INF_MISSING)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_BAD_STATE", adchpp::AdcCommand::ERROR_BAD_STATE)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_FEATURE_MISSING", adchpp::AdcCommand::ERROR_FEATURE_MISSING)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_BAD_IP", adchpp::AdcCommand::ERROR_BAD_IP)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_TRANSFER_GENERIC", adchpp::AdcCommand::ERROR_TRANSFER_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_FILE_NOT_AVAILABLE", adchpp::AdcCommand::ERROR_FILE_NOT_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_FILE_PART_NOT_AVAILABLE", adchpp::AdcCommand::ERROR_FILE_PART_NOT_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_SLOTS_FULL", adchpp::AdcCommand::ERROR_SLOTS_FULL)},
    {SWIG_LUA_CONSTTAB_INT("SEV_SUCCESS", adchpp::AdcCommand::SEV_SUCCESS)},
    {SWIG_LUA_CONSTTAB_INT("SEV_RECOVERABLE", adchpp::AdcCommand::SEV_RECOVERABLE)},
    {SWIG_LUA_CONSTTAB_INT("SEV_FATAL", adchpp::AdcCommand::SEV_FATAL)},
    {SWIG_LUA_CONSTTAB_INT("PRIORITY_NORMAL", adchpp::AdcCommand::PRIORITY_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("PRIORITY_LOW", adchpp::AdcCommand::PRIORITY_LOW)},
    {SWIG_LUA_CONSTTAB_INT("PRIORITY_IGNORE", adchpp::AdcCommand::PRIORITY_IGNORE)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_BROADCAST", adchpp::AdcCommand::TYPE_BROADCAST)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_CLIENT", adchpp::AdcCommand::TYPE_CLIENT)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_DIRECT", adchpp::AdcCommand::TYPE_DIRECT)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_ECHO", adchpp::AdcCommand::TYPE_ECHO)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_FEATURE", adchpp::AdcCommand::TYPE_FEATURE)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_INFO", adchpp::AdcCommand::TYPE_INFO)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_HUB", adchpp::AdcCommand::TYPE_HUB)},
    {SWIG_LUA_CONSTTAB_CHAR("TYPE_UDP", adchpp::AdcCommand::TYPE_UDP)},
    {SWIG_LUA_CONSTTAB_INT("CMD_SUP", adchpp::AdcCommand::CMD_SUP)},
    {SWIG_LUA_CONSTTAB_INT("CMD_STA", adchpp::AdcCommand::CMD_STA)},
    {SWIG_LUA_CONSTTAB_INT("CMD_INF", adchpp::AdcCommand::CMD_INF)},
    {SWIG_LUA_CONSTTAB_INT("CMD_MSG", adchpp::AdcCommand::CMD_MSG)},
    {SWIG_LUA_CONSTTAB_INT("CMD_SCH", adchpp::AdcCommand::CMD_SCH)},
    {SWIG_LUA_CONSTTAB_INT("CMD_RES", adchpp::AdcCommand::CMD_RES)},
    {SWIG_LUA_CONSTTAB_INT("CMD_CTM", adchpp::AdcCommand::CMD_CTM)},
    {SWIG_LUA_CONSTTAB_INT("CMD_RCM", adchpp::AdcCommand::CMD_RCM)},
    {SWIG_LUA_CONSTTAB_INT("CMD_GPA", adchpp::AdcCommand::CMD_GPA)},
    {SWIG_LUA_CONSTTAB_INT("CMD_PAS", adchpp::AdcCommand::CMD_PAS)},
    {SWIG_LUA_CONSTTAB_INT("CMD_QUI", adchpp::AdcCommand::CMD_QUI)},
    {SWIG_LUA_CONSTTAB_INT("CMD_GET", adchpp::AdcCommand::CMD_GET)},
    {SWIG_LUA_CONSTTAB_INT("CMD_GFI", adchpp::AdcCommand::CMD_GFI)},
    {SWIG_LUA_CONSTTAB_INT("CMD_SND", adchpp::AdcCommand::CMD_SND)},
    {SWIG_LUA_CONSTTAB_INT("CMD_SID", adchpp::AdcCommand::CMD_SID)},
    {SWIG_LUA_CONSTTAB_INT("CMD_CMD", adchpp::AdcCommand::CMD_CMD)},
    {SWIG_LUA_CONSTTAB_INT("CMD_NAT", adchpp::AdcCommand::CMD_NAT)},
    {SWIG_LUA_CONSTTAB_INT("CMD_RNT", adchpp::AdcCommand::CMD_RNT)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AdcCommand_Sf_SwigStatic_methods[]= {
    { "toSID", _wrap_AdcCommand_toSID},
    { "fromSID", _wrap_AdcCommand_fromSID},
    { "appendSID", _wrap_AdcCommand_appendSID},
    { "toField", _wrap_AdcCommand_toField},
    { "fromField", _wrap_AdcCommand_fromField},
    { "toFourCC", _wrap_AdcCommand_toFourCC},
    { "fromFourCC", _wrap_AdcCommand_fromFourCC},
    { "escape", _wrap_AdcCommand_escape},
    { "toCMD", _wrap_AdcCommand_toCMD},
    {0,0}
};
static swig_lua_class* swig_AdcCommand_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AdcCommand_Sf_SwigStatic = {
    "AdcCommand",
    swig_AdcCommand_Sf_SwigStatic_methods,
    swig_AdcCommand_Sf_SwigStatic_attributes,
    swig_AdcCommand_Sf_SwigStatic_constants,
    swig_AdcCommand_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AdcCommand_bases[] = {0};
static const char *swig_AdcCommand_base_names[] = {0};
static swig_lua_class _wrap_class_AdcCommand = { "AdcCommand", "AdcCommand", &SWIGTYPE_p_adchpp__AdcCommand,_proxy__wrap_new_AdcCommand, swig_delete_AdcCommand, swig_AdcCommand_methods, swig_AdcCommand_attributes, &swig_AdcCommand_Sf_SwigStatic, swig_AdcCommand_meta, swig_AdcCommand_bases, swig_AdcCommand_base_names };

static int _wrap_Entity_send__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::send",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::send",2,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_send",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Entity_send",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->send((adchpp::AdcCommand const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_send__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::send",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::send",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_send",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("Entity_send",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->send((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_send(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_send__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_send__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_send'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::Entity::send(adchpp::AdcCommand const &)\n"
    "    adchpp::Entity::send(adchpp::BufferPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_inject(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::inject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::inject",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::inject",2,"adchpp::AdcCommand &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_inject",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Entity_inject",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->inject(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getField(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getField",1,"adchpp::Entity const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::Entity::getField",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getField",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    try {
      result = (std::string *) &((adchpp::Entity const *)arg1)->getField((char const *)arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_hasField(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::hasField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::hasField",1,"adchpp::Entity const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::Entity::hasField",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_hasField",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    try {
      result = (bool)((adchpp::Entity const *)arg1)->hasField((char const *)arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setField(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("adchpp::Entity::setField",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::setField",1,"adchpp::Entity *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("adchpp::Entity::setField",2,"char const *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::Entity::setField",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_setField",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      (arg1)->setField((char const *)arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getAllFields(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::getAllFields",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getAllFields",1,"adchpp::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::getAllFields",2,"adchpp::AdcCommand &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getAllFields",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Entity_getAllFields",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (bool)((adchpp::Entity const *)arg1)->getAllFields(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getINF(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::BufferPtr *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::getINF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getINF",1,"adchpp::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getINF",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (adchpp::BufferPtr *) &((adchpp::Entity const *)arg1)->getINF();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_addSupports(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::addSupports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::addSupports",1,"adchpp::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::addSupports",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_addSupports",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      result = (bool)(arg1)->addSupports(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getSupportList(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  StringList result;
  
  SWIG_check_num_args("adchpp::Entity::getSupportList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getSupportList",1,"adchpp::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getSupportList",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = ((adchpp::Entity const *)arg1)->getSupportList();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    StringList * resultptr = new StringList((const StringList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_hasSupport(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::hasSupport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::hasSupport",1,"adchpp::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::hasSupport",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_hasSupport",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      result = (bool)((adchpp::Entity const *)arg1)->hasSupport(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_removeSupports(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::removeSupports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::removeSupports",1,"adchpp::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::removeSupports",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_removeSupports",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      result = (bool)(arg1)->removeSupports(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getSUP(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::BufferPtr *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::getSUP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getSUP",1,"adchpp::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getSUP",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (adchpp::BufferPtr *) &((adchpp::Entity const *)arg1)->getSUP();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getSID(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::Entity::getSID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getSID",1,"adchpp::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getSID",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (uint32_t)((adchpp::Entity const *)arg1)->getSID();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_isFiltered(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::isFiltered",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::isFiltered",1,"adchpp::Entity const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::Entity::isFiltered",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_isFiltered",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (bool)((adchpp::Entity const *)arg1)->isFiltered((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_updateFields(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::updateFields",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::updateFields",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::updateFields",2,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_updateFields",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Entity_updateFields",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->updateFields((adchpp::AdcCommand const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_updateSupports(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::updateSupports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::updateSupports",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::updateSupports",2,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_updateSupports",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Entity_updateSupports",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->updateSupports((adchpp::AdcCommand const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getCID(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::CID *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::getCID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getCID",1,"adchpp::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getCID",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (adchpp::CID *) &((adchpp::Entity const *)arg1)->getCID();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__CID,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setCID(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::CID *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::setCID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::setCID",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::setCID",2,"adchpp::CID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_setCID",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("Entity_setCID",2,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      (arg1)->setCID((adchpp::CID const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getState(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::Entity::State result;
  
  SWIG_check_num_args("adchpp::Entity::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getState",1,"adchpp::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getState",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (adchpp::Entity::State)((adchpp::Entity const *)arg1)->getState();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setState(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::Entity::State arg2 ;
  
  SWIG_check_num_args("adchpp::Entity::setState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::setState",1,"adchpp::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::setState",2,"adchpp::Entity::State");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_setState",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg2 = (adchpp::Entity::State)(int)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setState(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_isSet(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::isSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::isSet",1,"adchpp::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::isSet",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_isSet",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      result = (bool)((adchpp::Entity const *)arg1)->isSet(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_isAnySet(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::Entity::isAnySet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::isAnySet",1,"adchpp::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::isAnySet",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_isAnySet",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      result = (bool)((adchpp::Entity const *)arg1)->isAnySet(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setFlag(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::Entity::setFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::setFlag",1,"adchpp::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::setFlag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_setFlag",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setFlag(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_unsetFlag(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::Entity::unsetFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::unsetFlag",1,"adchpp::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Entity::unsetFlag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_unsetFlag",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->unsetFlag(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_asClient(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::Client *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::asClient",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::asClient",1,"adchpp::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_asClient",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (adchpp::Client *)adchpp_Entity_asClient(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Client,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_asHub(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  Hub *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::asHub",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::asHub",1,"adchpp::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_asHub",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (Hub *)adchpp_Entity_asHub(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Hub,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_asBot(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  adchpp::Bot *result = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::asBot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::asBot",1,"adchpp::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_asBot",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (adchpp::Bot *)adchpp_Entity_asBot(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Bot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getPluginData(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  PluginDataHandle *arg2 = 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("adchpp::Entity::getPluginData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::getPluginData",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::getPluginData",2,"PluginDataHandle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_getPluginData",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PluginDataHandle,0))){
    SWIG_fail_ptr("Entity_getPluginData",2,SWIGTYPE_p_PluginDataHandle);
  }
  
  {
    try {
      result = adchpp_Entity_getPluginData(arg1,(PluginDataHandle const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setPluginData(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  PluginDataHandle *arg2 = 0 ;
  SWIGLUA_REF arg3 ;
  
  SWIG_check_num_args("adchpp::Entity::setPluginData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::setPluginData",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::setPluginData",2,"PluginDataHandle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_setPluginData",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PluginDataHandle,0))){
    SWIG_fail_ptr("Entity_setPluginData",2,SWIGTYPE_p_PluginDataHandle);
  }
  
  swiglua_ref_set(&arg3,L,3); 
  {
    try {
      adchpp_Entity_setPluginData(arg1,(PluginDataHandle const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_clearPluginData(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Entity *arg1 = (adchpp::Entity *) 0 ;
  PluginDataHandle *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Entity::clearPluginData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Entity::clearPluginData",1,"adchpp::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Entity::clearPluginData",2,"PluginDataHandle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("Entity_clearPluginData",1,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PluginDataHandle,0))){
    SWIG_fail_ptr("Entity_clearPluginData",2,SWIGTYPE_p_PluginDataHandle);
  }
  
  {
    try {
      adchpp_Entity_clearPluginData(arg1,(PluginDataHandle const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_Entity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Entity_methods[]= {
    { "send", _wrap_Entity_send},
    { "inject", _wrap_Entity_inject},
    { "getField", _wrap_Entity_getField},
    { "hasField", _wrap_Entity_hasField},
    { "setField", _wrap_Entity_setField},
    { "getAllFields", _wrap_Entity_getAllFields},
    { "getINF", _wrap_Entity_getINF},
    { "addSupports", _wrap_Entity_addSupports},
    { "getSupportList", _wrap_Entity_getSupportList},
    { "hasSupport", _wrap_Entity_hasSupport},
    { "removeSupports", _wrap_Entity_removeSupports},
    { "getSUP", _wrap_Entity_getSUP},
    { "getSID", _wrap_Entity_getSID},
    { "isFiltered", _wrap_Entity_isFiltered},
    { "updateFields", _wrap_Entity_updateFields},
    { "updateSupports", _wrap_Entity_updateSupports},
    { "getCID", _wrap_Entity_getCID},
    { "setCID", _wrap_Entity_setCID},
    { "getState", _wrap_Entity_getState},
    { "setState", _wrap_Entity_setState},
    { "isSet", _wrap_Entity_isSet},
    { "isAnySet", _wrap_Entity_isAnySet},
    { "setFlag", _wrap_Entity_setFlag},
    { "unsetFlag", _wrap_Entity_unsetFlag},
    { "asClient", _wrap_Entity_asClient},
    { "asHub", _wrap_Entity_asHub},
    { "asBot", _wrap_Entity_asBot},
    { "getPluginData", _wrap_Entity_getPluginData},
    { "setPluginData", _wrap_Entity_setPluginData},
    { "clearPluginData", _wrap_Entity_clearPluginData},
    {0,0}
};
static swig_lua_method swig_Entity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Entity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Entity_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("STATE_PROTOCOL", adchpp::Entity::STATE_PROTOCOL)},
    {SWIG_LUA_CONSTTAB_INT("STATE_IDENTIFY", adchpp::Entity::STATE_IDENTIFY)},
    {SWIG_LUA_CONSTTAB_INT("STATE_VERIFY", adchpp::Entity::STATE_VERIFY)},
    {SWIG_LUA_CONSTTAB_INT("STATE_NORMAL", adchpp::Entity::STATE_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("STATE_DATA", adchpp::Entity::STATE_DATA)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_BOT", adchpp::Entity::FLAG_BOT)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_REGISTERED", adchpp::Entity::FLAG_REGISTERED)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_OP", adchpp::Entity::FLAG_OP)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_SU", adchpp::Entity::FLAG_SU)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_OWNER", adchpp::Entity::FLAG_OWNER)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_HUB", adchpp::Entity::FLAG_HUB)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_HIDDEN", adchpp::Entity::FLAG_HIDDEN)},
    {SWIG_LUA_CONSTTAB_INT("MASK_CLIENT_TYPE", adchpp::Entity::MASK_CLIENT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_PASSWORD", adchpp::Entity::FLAG_PASSWORD)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_EXT_AWAY", adchpp::Entity::FLAG_EXT_AWAY)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_OK_IP", adchpp::Entity::FLAG_OK_IP)},
    {SWIG_LUA_CONSTTAB_INT("FLAG_GHOST", adchpp::Entity::FLAG_GHOST)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Entity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Entity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Entity_Sf_SwigStatic = {
    "Entity",
    swig_Entity_Sf_SwigStatic_methods,
    swig_Entity_Sf_SwigStatic_attributes,
    swig_Entity_Sf_SwigStatic_constants,
    swig_Entity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Entity_bases[] = {0};
static const char *swig_Entity_base_names[] = {0};
static swig_lua_class _wrap_class_Entity = { "Entity", "Entity", &SWIGTYPE_p_adchpp__Entity,0,0, swig_Entity_methods, swig_Entity_attributes, &swig_Entity_Sf_SwigStatic, swig_Entity_meta, swig_Entity_bases, swig_Entity_base_names };

static int _wrap_Client_send__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("send",1,"adchpp::Client *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("send",2,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_send",1,SWIGTYPE_p_adchpp__Client);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Client_send",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->send((adchpp::AdcCommand const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_send__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("send",1,"adchpp::Client *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("send",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_send",1,SWIGTYPE_p_adchpp__Client);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("Client_send",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->send((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_send__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Client::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Client::send",1,"adchpp::Client *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Client::send",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_send",1,SWIGTYPE_p_adchpp__Client);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("Client_send",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->send((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_send(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Client, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Client_send__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Client, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Client_send__SWIG_0_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Client, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Client_send__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Client_send'\n"
    "  Possible C/C++ prototypes are:\n"
    "    send(adchpp::AdcCommand const &)\n"
    "    send(adchpp::BufferPtr const &)\n"
    "    adchpp::Client::send(adchpp::BufferPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Client_getQueuedBytes(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::Client::getQueuedBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Client::getQueuedBytes",1,"adchpp::Client *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_getQueuedBytes",1,SWIGTYPE_p_adchpp__Client);
  }
  
  {
    try {
      result = (size_t)(arg1)->getQueuedBytes();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_getIp(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::Client::getIp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Client::getIp",1,"adchpp::Client const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_getIp",1,SWIGTYPE_p_adchpp__Client);
  }
  
  {
    try {
      result = (std::string *) &((adchpp::Client const *)arg1)->getIp();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_setDataMode(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  adchpp::Client::DataFunction *arg2 = 0 ;
  int64_t arg3 ;
  
  SWIG_check_num_args("adchpp::Client::setDataMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Client::setDataMode",1,"adchpp::Client *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Client::setDataMode",2,"adchpp::Client::DataFunction const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::Client::setDataMode",3,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_setDataMode",1,SWIGTYPE_p_adchpp__Client);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t,0))){
    SWIG_fail_ptr("Client_setDataMode",2,SWIGTYPE_p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t);
  }
  
  {
    arg3 = (int64_t)lua_tonumber(L,3);
  }
  {
    try {
      (arg1)->setDataMode((adchpp::Client::DataFunction const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_disconnect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("adchpp::Client::disconnect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Client::disconnect",1,"adchpp::Client *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Client::disconnect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_disconnect",1,SWIGTYPE_p_adchpp__Client);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    try {
      adchpp_Client_disconnect__SWIG_0(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_disconnect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Client *arg1 = (adchpp::Client *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("adchpp::Client::disconnect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Client::disconnect",1,"adchpp::Client *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Client::disconnect",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::Client::disconnect",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("Client_disconnect",1,SWIGTYPE_p_adchpp__Client);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      adchpp_Client_disconnect__SWIG_1(arg1,arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Client_disconnect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Client, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Client_disconnect__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Client, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Client_disconnect__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Client_disconnect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::Client::disconnect(int)\n"
    "    adchpp::Client::disconnect(int,std::string const &)\n");
  lua_error(L);return 0;
}


static swig_lua_attribute swig_Client_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Client_methods[]= {
    { "send", _wrap_Client_send},
    { "getQueuedBytes", _wrap_Client_getQueuedBytes},
    { "getIp", _wrap_Client_getIp},
    { "setDataMode", _wrap_Client_setDataMode},
    { "disconnect", _wrap_Client_disconnect},
    {0,0}
};
static swig_lua_method swig_Client_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Client_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Client_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Client_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Client_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Client_Sf_SwigStatic = {
    "Client",
    swig_Client_Sf_SwigStatic_methods,
    swig_Client_Sf_SwigStatic_attributes,
    swig_Client_Sf_SwigStatic_constants,
    swig_Client_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Client_bases[] = {0,0};
static const char *swig_Client_base_names[] = {"adchpp::Entity *",0};
static swig_lua_class _wrap_class_Client = { "Client", "Client", &SWIGTYPE_p_adchpp__Client,0,0, swig_Client_methods, swig_Client_attributes, &swig_Client_Sf_SwigStatic, swig_Client_meta, swig_Client_bases, swig_Client_base_names };

static int _wrap_Bot_send__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Bot *arg1 = (adchpp::Bot *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("send",1,"adchpp::Bot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("send",2,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Bot,0))){
    SWIG_fail_ptr("Bot_send",1,SWIGTYPE_p_adchpp__Bot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("Bot_send",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->send((adchpp::AdcCommand const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bot_send__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Bot *arg1 = (adchpp::Bot *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("send",1,"adchpp::Bot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("send",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Bot,0))){
    SWIG_fail_ptr("Bot_send",1,SWIGTYPE_p_adchpp__Bot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("Bot_send",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->send((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bot_send__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Bot *arg1 = (adchpp::Bot *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Bot::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Bot::send",1,"adchpp::Bot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Bot::send",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Bot,0))){
    SWIG_fail_ptr("Bot_send",1,SWIGTYPE_p_adchpp__Bot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("Bot_send",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->send((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bot_send(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Bot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_adchpp__AdcCommand, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bot_send__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Bot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bot_send__SWIG_0_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Bot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bot_send__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bot_send'\n"
    "  Possible C/C++ prototypes are:\n"
    "    send(adchpp::AdcCommand const &)\n"
    "    send(adchpp::BufferPtr const &)\n"
    "    adchpp::Bot::send(adchpp::BufferPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Bot_disconnect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Bot *arg1 = (adchpp::Bot *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("adchpp::Bot::disconnect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Bot::disconnect",1,"adchpp::Bot *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Bot::disconnect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Bot,0))){
    SWIG_fail_ptr("Bot_disconnect",1,SWIGTYPE_p_adchpp__Bot);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    try {
      adchpp_Bot_disconnect__SWIG_0(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bot_disconnect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Bot *arg1 = (adchpp::Bot *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("adchpp::Bot::disconnect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Bot::disconnect",1,"adchpp::Bot *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::Bot::disconnect",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::Bot::disconnect",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Bot,0))){
    SWIG_fail_ptr("Bot_disconnect",1,SWIGTYPE_p_adchpp__Bot);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      adchpp_Bot_disconnect__SWIG_1(arg1,arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bot_disconnect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Bot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bot_disconnect__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_adchpp__Bot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Bot_disconnect__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bot_disconnect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    adchpp::Bot::disconnect(int)\n"
    "    adchpp::Bot::disconnect(int,std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Bot(void *obj) {
adchpp::Bot *arg1 = (adchpp::Bot *) obj;
delete arg1;
}
static swig_lua_attribute swig_Bot_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Bot_methods[]= {
    { "send", _wrap_Bot_send},
    { "disconnect", _wrap_Bot_disconnect},
    {0,0}
};
static swig_lua_method swig_Bot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Bot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Bot_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Bot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Bot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Bot_Sf_SwigStatic = {
    "Bot",
    swig_Bot_Sf_SwigStatic_methods,
    swig_Bot_Sf_SwigStatic_attributes,
    swig_Bot_Sf_SwigStatic_constants,
    swig_Bot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Bot_bases[] = {0,0};
static const char *swig_Bot_base_names[] = {"adchpp::Entity *",0};
static swig_lua_class _wrap_class_Bot = { "Bot", "Bot", &SWIGTYPE_p_adchpp__Bot,0, swig_delete_Bot, swig_Bot_methods, swig_Bot_attributes, &swig_Bot_Sf_SwigStatic, swig_Bot_meta, swig_Bot_bases, swig_Bot_base_names };

static int _wrap_Hub_send(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Hub *arg1 = (adchpp::Hub *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::Hub::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Hub::send",1,"adchpp::Hub *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Hub::send",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Hub,0))){
    SWIG_fail_ptr("Hub_send",1,SWIGTYPE_p_adchpp__Hub);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("Hub_send",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->send((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Hub(void *obj) {
adchpp::Hub *arg1 = (adchpp::Hub *) obj;
delete arg1;
}
static swig_lua_attribute swig_Hub_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Hub_methods[]= {
    { "send", _wrap_Hub_send},
    {0,0}
};
static swig_lua_method swig_Hub_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Hub_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Hub_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Hub_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Hub_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Hub_Sf_SwigStatic = {
    "Hub",
    swig_Hub_Sf_SwigStatic_methods,
    swig_Hub_Sf_SwigStatic_attributes,
    swig_Hub_Sf_SwigStatic_constants,
    swig_Hub_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Hub_bases[] = {0,0};
static const char *swig_Hub_base_names[] = {"adchpp::Entity *",0};
static swig_lua_class _wrap_class_Hub = { "Hub", "Hub", &SWIGTYPE_p_adchpp__Hub,0, swig_delete_Hub, swig_Hub_methods, swig_Hub_attributes, &swig_Hub_Sf_SwigStatic, swig_Hub_meta, swig_Hub_bases, swig_Hub_base_names };

static int _wrap_SignalE_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &) > *) 0 ;
  SwigValueWrapper< std::function< void (adchpp::Entity &) > > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &) >::connect",1,"adchpp::Signal< void (adchpp::Entity &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_RF_t,0))){
    SWIG_fail_ptr("SignalE_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalE(void *obj) {
adchpp::Signal< void (adchpp::Entity &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalE_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalE_methods[]= {
    { "connect", _wrap_SignalE_connect},
    {0,0}
};
static swig_lua_method swig_SignalE_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalE_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalE_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalE_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalE_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalE_Sf_SwigStatic = {
    "SignalE",
    swig_SignalE_Sf_SwigStatic_methods,
    swig_SignalE_Sf_SwigStatic_attributes,
    swig_SignalE_Sf_SwigStatic_constants,
    swig_SignalE_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalE_bases[] = {0};
static const char *swig_SignalE_base_names[] = {0};
static swig_lua_class _wrap_class_SignalE = { "SignalE", "SignalE", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_RF_t,0, swig_delete_SignalE, swig_SignalE_methods, swig_SignalE_attributes, &swig_SignalE_Sf_SwigStatic, swig_SignalE_meta, swig_SignalE_bases, swig_SignalE_base_names };

static void swig_delete_SignalTraitsE(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsE_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsE_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsE_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsE_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsE_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsE_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsE_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsE_Sf_SwigStatic = {
    "SignalTraitsE",
    swig_SignalTraitsE_Sf_SwigStatic_methods,
    swig_SignalTraitsE_Sf_SwigStatic_attributes,
    swig_SignalTraitsE_Sf_SwigStatic_constants,
    swig_SignalTraitsE_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsE_bases[] = {0};
static const char *swig_SignalTraitsE_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsE = { "SignalTraitsE", "SignalTraitsE", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t,0, swig_delete_SignalTraitsE, swig_SignalTraitsE_methods, swig_SignalTraitsE_attributes, &swig_SignalTraitsE_Sf_SwigStatic, swig_SignalTraitsE_meta, swig_SignalTraitsE_bases, swig_SignalTraitsE_base_names };

static int _wrap_SignalEAB_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *) 0 ;
  std::function< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) >::connect",1,"adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,0))){
    SWIG_fail_ptr("SignalEAB_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_adchpp_AdcCommand_SA__Sc_bool_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalEAB(void *obj) {
adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalEAB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalEAB_methods[]= {
    { "connect", _wrap_SignalEAB_connect},
    {0,0}
};
static swig_lua_method swig_SignalEAB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalEAB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalEAB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalEAB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalEAB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalEAB_Sf_SwigStatic = {
    "SignalEAB",
    swig_SignalEAB_Sf_SwigStatic_methods,
    swig_SignalEAB_Sf_SwigStatic_attributes,
    swig_SignalEAB_Sf_SwigStatic_constants,
    swig_SignalEAB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalEAB_bases[] = {0};
static const char *swig_SignalEAB_base_names[] = {0};
static swig_lua_class _wrap_class_SignalEAB = { "SignalEAB", "SignalEAB", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,0, swig_delete_SignalEAB, swig_SignalEAB_methods, swig_SignalEAB_attributes, &swig_SignalEAB_Sf_SwigStatic, swig_SignalEAB_meta, swig_SignalEAB_bases, swig_SignalEAB_base_names };

static void swig_delete_SignalTraitsEAB(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsEAB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsEAB_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsEAB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsEAB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsEAB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsEAB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsEAB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsEAB_Sf_SwigStatic = {
    "SignalTraitsEAB",
    swig_SignalTraitsEAB_Sf_SwigStatic_methods,
    swig_SignalTraitsEAB_Sf_SwigStatic_attributes,
    swig_SignalTraitsEAB_Sf_SwigStatic_constants,
    swig_SignalTraitsEAB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsEAB_bases[] = {0};
static const char *swig_SignalTraitsEAB_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsEAB = { "SignalTraitsEAB", "SignalTraitsEAB", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,0, swig_delete_SignalTraitsEAB, swig_SignalTraitsEAB_methods, swig_SignalTraitsEAB_attributes, &swig_SignalTraitsEAB_Sf_SwigStatic, swig_SignalTraitsEAB_meta, swig_SignalTraitsEAB_bases, swig_SignalTraitsEAB_base_names };

static int _wrap_SignalES_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &,std::string const &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,std::string const &) > *) 0 ;
  SwigValueWrapper< std::function< void (adchpp::Entity &,std::string const &) > > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &,std::string const &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &,std::string const &) >::connect",1,"adchpp::Signal< void (adchpp::Entity &,std::string const &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t,0))){
    SWIG_fail_ptr("SignalES_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_std_string_SS_const_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalES(void *obj) {
adchpp::Signal< void (adchpp::Entity &,std::string const &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,std::string const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalES_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalES_methods[]= {
    { "connect", _wrap_SignalES_connect},
    {0,0}
};
static swig_lua_method swig_SignalES_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalES_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalES_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalES_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalES_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalES_Sf_SwigStatic = {
    "SignalES",
    swig_SignalES_Sf_SwigStatic_methods,
    swig_SignalES_Sf_SwigStatic_attributes,
    swig_SignalES_Sf_SwigStatic_constants,
    swig_SignalES_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalES_bases[] = {0};
static const char *swig_SignalES_base_names[] = {0};
static swig_lua_class _wrap_class_SignalES = { "SignalES", "SignalES", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t,0, swig_delete_SignalES, swig_SignalES_methods, swig_SignalES_attributes, &swig_SignalES_Sf_SwigStatic, swig_SignalES_meta, swig_SignalES_bases, swig_SignalES_base_names };

static void swig_delete_SignalTraitsES(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &,std::string const &) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &,std::string const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsES_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsES_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsES_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsES_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsES_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsES_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsES_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsES_Sf_SwigStatic = {
    "SignalTraitsES",
    swig_SignalTraitsES_Sf_SwigStatic_methods,
    swig_SignalTraitsES_Sf_SwigStatic_attributes,
    swig_SignalTraitsES_Sf_SwigStatic_constants,
    swig_SignalTraitsES_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsES_bases[] = {0};
static const char *swig_SignalTraitsES_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsES = { "SignalTraitsES", "SignalTraitsES", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t,0, swig_delete_SignalTraitsES, swig_SignalTraitsES_methods, swig_SignalTraitsES_attributes, &swig_SignalTraitsES_Sf_SwigStatic, swig_SignalTraitsES_meta, swig_SignalTraitsES_bases, swig_SignalTraitsES_base_names };

static int _wrap_SignalEcAB_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *) 0 ;
  std::function< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) >::connect",1,"adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,0))){
    SWIG_fail_ptr("SignalEcAB_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_adchpp_AdcCommand_SS_const_SA__Sc_bool_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalEcAB(void *obj) {
adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalEcAB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalEcAB_methods[]= {
    { "connect", _wrap_SignalEcAB_connect},
    {0,0}
};
static swig_lua_method swig_SignalEcAB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalEcAB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalEcAB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalEcAB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalEcAB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalEcAB_Sf_SwigStatic = {
    "SignalEcAB",
    swig_SignalEcAB_Sf_SwigStatic_methods,
    swig_SignalEcAB_Sf_SwigStatic_attributes,
    swig_SignalEcAB_Sf_SwigStatic_constants,
    swig_SignalEcAB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalEcAB_bases[] = {0};
static const char *swig_SignalEcAB_base_names[] = {0};
static swig_lua_class _wrap_class_SignalEcAB = { "SignalEcAB", "SignalEcAB", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,0, swig_delete_SignalEcAB, swig_SignalEcAB_methods, swig_SignalEcAB_attributes, &swig_SignalEcAB_Sf_SwigStatic, swig_SignalEcAB_meta, swig_SignalEcAB_bases, swig_SignalEcAB_base_names };

static void swig_delete_SignalTraitsEcAB(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsEcAB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsEcAB_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsEcAB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsEcAB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsEcAB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsEcAB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsEcAB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsEcAB_Sf_SwigStatic = {
    "SignalTraitsEcAB",
    swig_SignalTraitsEcAB_Sf_SwigStatic_methods,
    swig_SignalTraitsEcAB_Sf_SwigStatic_attributes,
    swig_SignalTraitsEcAB_Sf_SwigStatic_constants,
    swig_SignalTraitsEcAB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsEcAB_bases[] = {0};
static const char *swig_SignalTraitsEcAB_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsEcAB = { "SignalTraitsEcAB", "SignalTraitsEcAB", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,0, swig_delete_SignalTraitsEcAB, swig_SignalTraitsEcAB_methods, swig_SignalTraitsEcAB_attributes, &swig_SignalTraitsEcAB_Sf_SwigStatic, swig_SignalTraitsEcAB_meta, swig_SignalTraitsEcAB_bases, swig_SignalTraitsEcAB_base_names };

static int _wrap_SignalEI_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &,int) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,int) > *) 0 ;
  std::function< void (adchpp::Entity &,int) > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &,int) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &,int) >::connect",1,"adchpp::Signal< void (adchpp::Entity &,int) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t,0))){
    SWIG_fail_ptr("SignalEI_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_int_SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalEI(void *obj) {
adchpp::Signal< void (adchpp::Entity &,int) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,int) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalEI_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalEI_methods[]= {
    { "connect", _wrap_SignalEI_connect},
    {0,0}
};
static swig_lua_method swig_SignalEI_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalEI_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalEI_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalEI_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalEI_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalEI_Sf_SwigStatic = {
    "SignalEI",
    swig_SignalEI_Sf_SwigStatic_methods,
    swig_SignalEI_Sf_SwigStatic_attributes,
    swig_SignalEI_Sf_SwigStatic_constants,
    swig_SignalEI_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalEI_bases[] = {0};
static const char *swig_SignalEI_base_names[] = {0};
static swig_lua_class _wrap_class_SignalEI = { "SignalEI", "SignalEI", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t,0, swig_delete_SignalEI, swig_SignalEI_methods, swig_SignalEI_attributes, &swig_SignalEI_Sf_SwigStatic, swig_SignalEI_meta, swig_SignalEI_bases, swig_SignalEI_base_names };

static void swig_delete_SignalTraitsEI(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &,int) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &,int) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsEI_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsEI_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsEI_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsEI_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsEI_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsEI_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsEI_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsEI_Sf_SwigStatic = {
    "SignalTraitsEI",
    swig_SignalTraitsEI_Sf_SwigStatic_methods,
    swig_SignalTraitsEI_Sf_SwigStatic_attributes,
    swig_SignalTraitsEI_Sf_SwigStatic_constants,
    swig_SignalTraitsEI_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsEI_bases[] = {0};
static const char *swig_SignalTraitsEI_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsEI = { "SignalTraitsEI", "SignalTraitsEI", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t,0, swig_delete_SignalTraitsEI, swig_SignalTraitsEI_methods, swig_SignalTraitsEI_attributes, &swig_SignalTraitsEI_Sf_SwigStatic, swig_SignalTraitsEI_meta, swig_SignalTraitsEI_bases, swig_SignalTraitsEI_base_names };

static int _wrap_SignalERS_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *) 0 ;
  SwigValueWrapper< std::function< void (adchpp::Entity &,DCReason,std::string const &) > > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) >::connect",1,"adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,0))){
    SWIG_fail_ptr("SignalERS_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_DCReason_Sc_std_string_SS_const_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalERS(void *obj) {
adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalERS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalERS_methods[]= {
    { "connect", _wrap_SignalERS_connect},
    {0,0}
};
static swig_lua_method swig_SignalERS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalERS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalERS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalERS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalERS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalERS_Sf_SwigStatic = {
    "SignalERS",
    swig_SignalERS_Sf_SwigStatic_methods,
    swig_SignalERS_Sf_SwigStatic_attributes,
    swig_SignalERS_Sf_SwigStatic_constants,
    swig_SignalERS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalERS_bases[] = {0};
static const char *swig_SignalERS_base_names[] = {0};
static swig_lua_class _wrap_class_SignalERS = { "SignalERS", "SignalERS", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,0, swig_delete_SignalERS, swig_SignalERS_methods, swig_SignalERS_attributes, &swig_SignalERS_Sf_SwigStatic, swig_SignalERS_meta, swig_SignalERS_bases, swig_SignalERS_base_names };

static void swig_delete_SignalTraitsERS(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &,DCReason,std::string const &) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &,DCReason,std::string const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsERS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsERS_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsERS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsERS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsERS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsERS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsERS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsERS_Sf_SwigStatic = {
    "SignalTraitsERS",
    swig_SignalTraitsERS_Sf_SwigStatic_methods,
    swig_SignalTraitsERS_Sf_SwigStatic_attributes,
    swig_SignalTraitsERS_Sf_SwigStatic_constants,
    swig_SignalTraitsERS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsERS_bases[] = {0};
static const char *swig_SignalTraitsERS_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsERS = { "SignalTraitsERS", "SignalTraitsERS", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,0, swig_delete_SignalTraitsERS, swig_SignalTraitsERS_methods, swig_SignalTraitsERS_attributes, &swig_SignalTraitsERS_Sf_SwigStatic, swig_SignalTraitsERS_meta, swig_SignalTraitsERS_bases, swig_SignalTraitsERS_base_names };

static int _wrap_SignalESB_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *) 0 ;
  std::function< void (adchpp::Entity &,StringList const &,bool &) > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) >::connect",1,"adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,0))){
    SWIG_fail_ptr("SignalESB_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_adchpp_Entity_SA__Sc_StringList_SS_const_SA__Sc_bool_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalESB(void *obj) {
adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *arg1 = (adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalESB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalESB_methods[]= {
    { "connect", _wrap_SignalESB_connect},
    {0,0}
};
static swig_lua_method swig_SignalESB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalESB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalESB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalESB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalESB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalESB_Sf_SwigStatic = {
    "SignalESB",
    swig_SignalESB_Sf_SwigStatic_methods,
    swig_SignalESB_Sf_SwigStatic_attributes,
    swig_SignalESB_Sf_SwigStatic_constants,
    swig_SignalESB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalESB_bases[] = {0};
static const char *swig_SignalESB_base_names[] = {0};
static swig_lua_class _wrap_class_SignalESB = { "SignalESB", "SignalESB", &SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,0, swig_delete_SignalESB, swig_SignalESB_methods, swig_SignalESB_attributes, &swig_SignalESB_Sf_SwigStatic, swig_SignalESB_meta, swig_SignalESB_bases, swig_SignalESB_base_names };

static void swig_delete_SignalTraitsESB(void *obj) {
adchpp::SignalTraits< void (adchpp::Entity &,StringList const &,bool &) > *arg1 = (adchpp::SignalTraits< void (adchpp::Entity &,StringList const &,bool &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsESB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsESB_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsESB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsESB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsESB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsESB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsESB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsESB_Sf_SwigStatic = {
    "SignalTraitsESB",
    swig_SignalTraitsESB_Sf_SwigStatic_methods,
    swig_SignalTraitsESB_Sf_SwigStatic_attributes,
    swig_SignalTraitsESB_Sf_SwigStatic_constants,
    swig_SignalTraitsESB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsESB_bases[] = {0};
static const char *swig_SignalTraitsESB_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsESB = { "SignalTraitsESB", "SignalTraitsESB", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,0, swig_delete_SignalTraitsESB, swig_SignalTraitsESB_methods, swig_SignalTraitsESB_attributes, &swig_SignalTraitsESB_Sf_SwigStatic, swig_SignalTraitsESB_meta, swig_SignalTraitsESB_bases, swig_SignalTraitsESB_base_names };

static int _wrap_SignalS_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (SimpleXML const &) > *arg1 = (adchpp::Signal< void (SimpleXML const &) > *) 0 ;
  SwigValueWrapper< std::function< void (SimpleXML const &) > > arg2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (SimpleXML const &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (SimpleXML const &) >::connect",1,"adchpp::Signal< void (SimpleXML const &) > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fSimpleXML_const_RF_t,0))){
    SWIG_fail_ptr("SignalS_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fSimpleXML_const_RF_t);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_SimpleXML_SS_const_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalS(void *obj) {
adchpp::Signal< void (SimpleXML const &) > *arg1 = (adchpp::Signal< void (SimpleXML const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalS_methods[]= {
    { "connect", _wrap_SignalS_connect},
    {0,0}
};
static swig_lua_method swig_SignalS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalS_Sf_SwigStatic = {
    "SignalS",
    swig_SignalS_Sf_SwigStatic_methods,
    swig_SignalS_Sf_SwigStatic_attributes,
    swig_SignalS_Sf_SwigStatic_constants,
    swig_SignalS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalS_bases[] = {0};
static const char *swig_SignalS_base_names[] = {0};
static swig_lua_class _wrap_class_SignalS = { "SignalS", "SignalS", &SWIGTYPE_p_adchpp__SignalT_void_fSimpleXML_const_RF_t,0, swig_delete_SignalS, swig_SignalS_methods, swig_SignalS_attributes, &swig_SignalS_Sf_SwigStatic, swig_SignalS_meta, swig_SignalS_bases, swig_SignalS_base_names };

static void swig_delete_SignalTraitsS(void *obj) {
adchpp::SignalTraits< void (SimpleXML const &) > *arg1 = (adchpp::SignalTraits< void (SimpleXML const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsS_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsS_Sf_SwigStatic = {
    "SignalTraitsS",
    swig_SignalTraitsS_Sf_SwigStatic_methods,
    swig_SignalTraitsS_Sf_SwigStatic_attributes,
    swig_SignalTraitsS_Sf_SwigStatic_constants,
    swig_SignalTraitsS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsS_bases[] = {0};
static const char *swig_SignalTraitsS_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsS = { "SignalTraitsS", "SignalTraitsS", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t,0, swig_delete_SignalTraitsS, swig_SignalTraitsS_methods, swig_SignalTraitsS_attributes, &swig_SignalTraitsS_Sf_SwigStatic, swig_SignalTraitsS_meta, swig_SignalTraitsS_bases, swig_SignalTraitsS_base_names };

static int _wrap_SignalSt_connect(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Signal< void (std::string const &) > *arg1 = (adchpp::Signal< void (std::string const &) > *) 0 ;
  SwigValueWrapper< std::function< void (std::string const &) > > arg2 ;
  std::function< void (std::string const &) > *argp2 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::Signal< void (std::string const &) >::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Signal< void (std::string const &) >::connect",1,"adchpp::Signal< void (std::string const &) > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::Signal< void (std::string const &) >::connect",2,"std::function< void (std::string const &) >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__SignalT_void_fstd__string_const_RF_t,0))){
    SWIG_fail_ptr("SignalSt_connect",1,SWIGTYPE_p_adchpp__SignalT_void_fstd__string_const_RF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_void_fstd__string_const_RF_t,0))){
    SWIG_fail_ptr("SignalSt_connect",2,SWIGTYPE_p_std__functionT_void_fstd__string_const_RF_t);
  }
  arg2 = *argp2;
  
  {
    try {
      result = adchpp_Signal_Sl_void_Sp_std_string_SS_const_SA__SP__Sg__connect(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalSt(void *obj) {
adchpp::Signal< void (std::string const &) > *arg1 = (adchpp::Signal< void (std::string const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSt_methods[]= {
    { "connect", _wrap_SignalSt_connect},
    {0,0}
};
static swig_lua_method swig_SignalSt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSt_Sf_SwigStatic = {
    "SignalSt",
    swig_SignalSt_Sf_SwigStatic_methods,
    swig_SignalSt_Sf_SwigStatic_attributes,
    swig_SignalSt_Sf_SwigStatic_constants,
    swig_SignalSt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSt_bases[] = {0};
static const char *swig_SignalSt_base_names[] = {0};
static swig_lua_class _wrap_class_SignalSt = { "SignalSt", "SignalSt", &SWIGTYPE_p_adchpp__SignalT_void_fstd__string_const_RF_t,0, swig_delete_SignalSt, swig_SignalSt_methods, swig_SignalSt_attributes, &swig_SignalSt_Sf_SwigStatic, swig_SignalSt_meta, swig_SignalSt_bases, swig_SignalSt_base_names };

static void swig_delete_SignalTraitsSt(void *obj) {
adchpp::SignalTraits< void (std::string const &) > *arg1 = (adchpp::SignalTraits< void (std::string const &) > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalTraitsSt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalTraitsSt_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalTraitsSt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalTraitsSt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalTraitsSt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalTraitsSt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalTraitsSt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalTraitsSt_Sf_SwigStatic = {
    "SignalTraitsSt",
    swig_SignalTraitsSt_Sf_SwigStatic_methods,
    swig_SignalTraitsSt_Sf_SwigStatic_attributes,
    swig_SignalTraitsSt_Sf_SwigStatic_constants,
    swig_SignalTraitsSt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalTraitsSt_bases[] = {0};
static const char *swig_SignalTraitsSt_base_names[] = {0};
static swig_lua_class _wrap_class_SignalTraitsSt = { "SignalTraitsSt", "SignalTraitsSt", &SWIGTYPE_p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t,0, swig_delete_SignalTraitsSt, swig_SignalTraitsSt_methods, swig_SignalTraitsSt_attributes, &swig_SignalTraitsSt_Sf_SwigStatic, swig_SignalTraitsSt_meta, swig_SignalTraitsSt_bases, swig_SignalTraitsSt_base_names };

static int _wrap_LogManager_log(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::LogManager *arg1 = (adchpp::LogManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("adchpp::LogManager::log",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::LogManager::log",1,"adchpp::LogManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::LogManager::log",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::LogManager::log",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__LogManager,0))){
    SWIG_fail_ptr("LogManager_log",1,SWIGTYPE_p_adchpp__LogManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try {
      (arg1)->log((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_setLogFile(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::LogManager *arg1 = (adchpp::LogManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::LogManager::setLogFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::LogManager::setLogFile",1,"adchpp::LogManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::LogManager::setLogFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__LogManager,0))){
    SWIG_fail_ptr("LogManager_setLogFile",1,SWIGTYPE_p_adchpp__LogManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      (arg1)->setLogFile((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_getLogFile(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::LogManager *arg1 = (adchpp::LogManager *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::LogManager::getLogFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::LogManager::getLogFile",1,"adchpp::LogManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__LogManager,0))){
    SWIG_fail_ptr("LogManager_getLogFile",1,SWIGTYPE_p_adchpp__LogManager);
  }
  
  {
    try {
      result = (std::string *) &((adchpp::LogManager const *)arg1)->getLogFile();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_setEnabled(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::LogManager *arg1 = (adchpp::LogManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("adchpp::LogManager::setEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::LogManager::setEnabled",1,"adchpp::LogManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("adchpp::LogManager::setEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__LogManager,0))){
    SWIG_fail_ptr("LogManager_setEnabled",1,SWIGTYPE_p_adchpp__LogManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  {
    try {
      (arg1)->setEnabled(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_getEnabled(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::LogManager *arg1 = (adchpp::LogManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::LogManager::getEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::LogManager::getEnabled",1,"adchpp::LogManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__LogManager,0))){
    SWIG_fail_ptr("LogManager_getEnabled",1,SWIGTYPE_p_adchpp__LogManager);
  }
  
  {
    try {
      result = (bool)((adchpp::LogManager const *)arg1)->getEnabled();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_signalLog(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::LogManager *arg1 = (adchpp::LogManager *) 0 ;
  adchpp::LogManager::SignalLog::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::LogManager::signalLog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::LogManager::signalLog",1,"adchpp::LogManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__LogManager,0))){
    SWIG_fail_ptr("LogManager_signalLog",1,SWIGTYPE_p_adchpp__LogManager);
  }
  
  {
    try {
      result = (adchpp::LogManager::SignalLog::Signal *) &(arg1)->signalLog();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fstd__string_const_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_LogManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LogManager_methods[]= {
    { "log", _wrap_LogManager_log},
    { "setLogFile", _wrap_LogManager_setLogFile},
    { "getLogFile", _wrap_LogManager_getLogFile},
    { "setEnabled", _wrap_LogManager_setEnabled},
    { "getEnabled", _wrap_LogManager_getEnabled},
    { "signalLog", _wrap_LogManager_signalLog},
    {0,0}
};
static swig_lua_method swig_LogManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LogManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LogManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LogManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LogManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LogManager_Sf_SwigStatic = {
    "LogManager",
    swig_LogManager_Sf_SwigStatic_methods,
    swig_LogManager_Sf_SwigStatic_attributes,
    swig_LogManager_Sf_SwigStatic_constants,
    swig_LogManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LogManager_bases[] = {0};
static const char *swig_LogManager_base_names[] = {0};
static swig_lua_class _wrap_class_LogManager = { "LogManager", "LogManager", &SWIGTYPE_p_adchpp__LogManager,0,0, swig_LogManager_methods, swig_LogManager_attributes, &swig_LogManager_Sf_SwigStatic, swig_LogManager_meta, swig_LogManager_bases, swig_LogManager_base_names };

static int _wrap_ClientManager_getEntity(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  uint32_t arg2 ;
  adchpp::Entity *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::getEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getEntity",1,"adchpp::ClientManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::ClientManager::getEntity",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getEntity",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    arg2 = (uint32_t)lua_tonumber(L,2);
  }
  {
    try {
      result = (adchpp::Entity *)(arg1)->getEntity(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_createBot(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  SwigValueWrapper< std::function< void (adchpp::Bot &,shared_ptr< adchpp::Buffer > const &) > > arg2 ;
  adchpp::Bot *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::createBot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::createBot",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_createBot",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      result = (adchpp::Bot *)adchpp_ClientManager_createBot(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Bot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_createSimpleBot(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Bot *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::createSimpleBot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::createSimpleBot",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_createSimpleBot",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::Bot *)adchpp_ClientManager_createSimpleBot(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Bot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_regBot(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Bot *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::regBot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::regBot",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::regBot",2,"adchpp::Bot &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_regBot",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Bot,0))){
    SWIG_fail_ptr("ClientManager_regBot",2,SWIGTYPE_p_adchpp__Bot);
  }
  
  {
    try {
      (arg1)->regBot(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_getEntities(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::EntityList result;
  
  SWIG_check_num_args("adchpp::ClientManager::getEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getEntities",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getEntities",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = adchpp_ClientManager_getEntities(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::EntityList * resultptr = new adchpp::EntityList((const adchpp::EntityList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_adchpp__Entity_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_findByCID(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::CID *arg2 = 0 ;
  adchpp::Entity *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::findByCID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::findByCID",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::findByCID",2,"adchpp::CID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_findByCID",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__CID,0))){
    SWIG_fail_ptr("ClientManager_findByCID",2,SWIGTYPE_p_adchpp__CID);
  }
  
  {
    try {
      result = (adchpp::Entity *)adchpp_ClientManager_findByCID(arg1,(adchpp::CID const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_findByNick(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  adchpp::Entity *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::findByNick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::findByNick",1,"adchpp::ClientManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::ClientManager::findByNick",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_findByNick",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (adchpp::Entity *)adchpp_ClientManager_findByNick(arg1,(std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_send(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::AdcCommand *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::send",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::send",2,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_send",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("ClientManager_send",2,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      (arg1)->send((adchpp::AdcCommand const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_sendToAll(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::sendToAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::sendToAll",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::sendToAll",2,"adchpp::BufferPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_sendToAll",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("ClientManager_sendToAll",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    try {
      (arg1)->sendToAll((adchpp::BufferPtr const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_sendTo(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::BufferPtr *arg2 = 0 ;
  uint32_t arg3 ;
  
  SWIG_check_num_args("adchpp::ClientManager::sendTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::sendTo",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::sendTo",2,"adchpp::BufferPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::ClientManager::sendTo",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_sendTo",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t,0))){
    SWIG_fail_ptr("ClientManager_sendTo",2,SWIGTYPE_p_shared_ptrT_adchpp__Buffer_t);
  }
  
  {
    arg3 = (uint32_t)lua_tonumber(L,3);
  }
  {
    try {
      (arg1)->sendTo((adchpp::BufferPtr const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_enterIdentify(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("adchpp::ClientManager::enterIdentify",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::enterIdentify",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::enterIdentify",2,"adchpp::Entity &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("adchpp::ClientManager::enterIdentify",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_enterIdentify",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_enterIdentify",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  {
    try {
      (arg1)->enterIdentify(*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_enterVerify(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  bool arg3 ;
  ByteVector result;
  
  SWIG_check_num_args("adchpp::ClientManager::enterVerify",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::enterVerify",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::enterVerify",2,"adchpp::Entity &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("adchpp::ClientManager::enterVerify",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_enterVerify",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_enterVerify",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  {
    try {
      result = (arg1)->enterVerify(*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    ByteVector * resultptr = new ByteVector((const ByteVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_enterNormal(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::enterNormal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::enterNormal",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::enterNormal",2,"adchpp::Entity &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("adchpp::ClientManager::enterNormal",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("adchpp::ClientManager::enterNormal",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_enterNormal",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_enterNormal",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  {
    try {
      result = (bool)(arg1)->enterNormal(*arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifySUP(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  adchpp::AdcCommand *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifySUP",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifySUP",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifySUP",2,"adchpp::Entity &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::ClientManager::verifySUP",3,"adchpp::AdcCommand &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifySUP",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_verifySUP",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("ClientManager_verifySUP",3,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (bool)(arg1)->verifySUP(*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifyINF(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  adchpp::AdcCommand *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifyINF",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifyINF",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifyINF",2,"adchpp::Entity &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::ClientManager::verifyINF",3,"adchpp::AdcCommand &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifyINF",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_verifyINF",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("ClientManager_verifyINF",3,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (bool)(arg1)->verifyINF(*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifyNick(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  adchpp::AdcCommand *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifyNick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifyNick",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifyNick",2,"adchpp::Entity &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::ClientManager::verifyNick",3,"adchpp::AdcCommand const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifyNick",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_verifyNick",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("ClientManager_verifyNick",3,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (bool)(arg1)->verifyNick(*arg2,(adchpp::AdcCommand const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifyPassword(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ByteVector *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string temp3 ;
  std::string temp5 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifyPassword",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifyPassword",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifyPassword",2,"adchpp::Entity &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("adchpp::ClientManager::verifyPassword",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("adchpp::ClientManager::verifyPassword",4,"ByteVector const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("adchpp::ClientManager::verifyPassword",5,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifyPassword",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_verifyPassword",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("ClientManager_verifyPassword",4,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  {
    try {
      result = (bool)(arg1)->verifyPassword(*arg2,(std::string const &)*arg3,(ByteVector const &)*arg4,(std::string const &)*arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifyIp(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Client *arg2 = 0 ;
  adchpp::AdcCommand *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifyIp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifyIp",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifyIp",2,"adchpp::Client &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::ClientManager::verifyIp",3,"adchpp::AdcCommand &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("adchpp::ClientManager::verifyIp",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifyIp",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Client,0))){
    SWIG_fail_ptr("ClientManager_verifyIp",2,SWIGTYPE_p_adchpp__Client);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("ClientManager_verifyIp",3,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  {
    try {
      result = (bool)(arg1)->verifyIp(*arg2,*arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifyCID(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  adchpp::AdcCommand *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifyCID",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifyCID",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifyCID",2,"adchpp::Entity &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::ClientManager::verifyCID",3,"adchpp::AdcCommand &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifyCID",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_verifyCID",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_adchpp__AdcCommand,0))){
    SWIG_fail_ptr("ClientManager_verifyCID",3,SWIGTYPE_p_adchpp__AdcCommand);
  }
  
  {
    try {
      result = (bool)(arg1)->verifyCID(*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_verifyOverflow(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("adchpp::ClientManager::verifyOverflow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::verifyOverflow",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::verifyOverflow",2,"adchpp::Entity &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_verifyOverflow",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_verifyOverflow",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  {
    try {
      result = (bool)(arg1)->verifyOverflow(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_setState(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::Entity *arg2 = 0 ;
  adchpp::Entity::State arg3 ;
  
  SWIG_check_num_args("adchpp::ClientManager::setState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::setState",1,"adchpp::ClientManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::ClientManager::setState",2,"adchpp::Entity &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("adchpp::ClientManager::setState",3,"adchpp::Entity::State");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_setState",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_adchpp__Entity,0))){
    SWIG_fail_ptr("ClientManager_setState",2,SWIGTYPE_p_adchpp__Entity);
  }
  
  arg3 = (adchpp::Entity::State)(int)lua_tonumber(L, 3);
  {
    try {
      (arg1)->setState(*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_getQueuedBytes(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::ClientManager::getQueuedBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getQueuedBytes",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getQueuedBytes",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (size_t)(arg1)->getQueuedBytes();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalConnected(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalConnected::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalConnected",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalConnected",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalConnected::Signal *) &(arg1)->signalConnected();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalReady(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalReady::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalReady",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalReady",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalReady",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalReady::Signal *) &(arg1)->signalReady();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalReceive(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalReceive::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalReceive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalReceive",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalReceive",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalReceive::Signal *) &(arg1)->signalReceive();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalBadLine(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalBadLine::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalBadLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalBadLine",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalBadLine",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalBadLine::Signal *) &(arg1)->signalBadLine();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalSend(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalSend::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalSend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalSend",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalSend",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalSend::Signal *) &(arg1)->signalSend();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalState(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalState::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalState",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalState",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalState::Signal *) &(arg1)->signalState();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_signalDisconnected(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  adchpp::ClientManager::SignalDisconnected::Signal *result = 0 ;
  
  SWIG_check_num_args("adchpp::ClientManager::signalDisconnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::signalDisconnected",1,"adchpp::ClientManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_signalDisconnected",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (adchpp::ClientManager::SignalDisconnected::Signal *) &(arg1)->signalDisconnected();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_setMaxCommandSize(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::ClientManager::setMaxCommandSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::setMaxCommandSize",1,"adchpp::ClientManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::ClientManager::setMaxCommandSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_setMaxCommandSize",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setMaxCommandSize(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_getMaxCommandSize(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::ClientManager::getMaxCommandSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getMaxCommandSize",1,"adchpp::ClientManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getMaxCommandSize",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (size_t)((adchpp::ClientManager const *)arg1)->getMaxCommandSize();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_setLogTimeout(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("adchpp::ClientManager::setLogTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::setLogTimeout",1,"adchpp::ClientManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adchpp::ClientManager::setLogTimeout",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_setLogTimeout",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try {
      (arg1)->setLogTimeout(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_getLogTimeout(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("adchpp::ClientManager::getLogTimeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getLogTimeout",1,"adchpp::ClientManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getLogTimeout",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (size_t)((adchpp::ClientManager const *)arg1)->getLogTimeout();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_getStartTime(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  time_t result;
  
  SWIG_check_num_args("adchpp::ClientManager::getStartTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getStartTime",1,"adchpp::ClientManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getStartTime",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (time_t)adchpp_ClientManager_getStartTime((adchpp::ClientManager const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientManager_getUpTime(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::ClientManager *arg1 = (adchpp::ClientManager *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("adchpp::ClientManager::getUpTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::ClientManager::getUpTime",1,"adchpp::ClientManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__ClientManager,0))){
    SWIG_fail_ptr("ClientManager_getUpTime",1,SWIGTYPE_p_adchpp__ClientManager);
  }
  
  {
    try {
      result = (uint32_t)adchpp_ClientManager_getUpTime((adchpp::ClientManager const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_ClientManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClientManager_methods[]= {
    { "getEntity", _wrap_ClientManager_getEntity},
    { "createBot", _wrap_ClientManager_createBot},
    { "createSimpleBot", _wrap_ClientManager_createSimpleBot},
    { "regBot", _wrap_ClientManager_regBot},
    { "getEntities", _wrap_ClientManager_getEntities},
    { "findByCID", _wrap_ClientManager_findByCID},
    { "findByNick", _wrap_ClientManager_findByNick},
    { "send", _wrap_ClientManager_send},
    { "sendToAll", _wrap_ClientManager_sendToAll},
    { "sendTo", _wrap_ClientManager_sendTo},
    { "enterIdentify", _wrap_ClientManager_enterIdentify},
    { "enterVerify", _wrap_ClientManager_enterVerify},
    { "enterNormal", _wrap_ClientManager_enterNormal},
    { "verifySUP", _wrap_ClientManager_verifySUP},
    { "verifyINF", _wrap_ClientManager_verifyINF},
    { "verifyNick", _wrap_ClientManager_verifyNick},
    { "verifyPassword", _wrap_ClientManager_verifyPassword},
    { "verifyIp", _wrap_ClientManager_verifyIp},
    { "verifyCID", _wrap_ClientManager_verifyCID},
    { "verifyOverflow", _wrap_ClientManager_verifyOverflow},
    { "setState", _wrap_ClientManager_setState},
    { "getQueuedBytes", _wrap_ClientManager_getQueuedBytes},
    { "signalConnected", _wrap_ClientManager_signalConnected},
    { "signalReady", _wrap_ClientManager_signalReady},
    { "signalReceive", _wrap_ClientManager_signalReceive},
    { "signalBadLine", _wrap_ClientManager_signalBadLine},
    { "signalSend", _wrap_ClientManager_signalSend},
    { "signalState", _wrap_ClientManager_signalState},
    { "signalDisconnected", _wrap_ClientManager_signalDisconnected},
    { "setMaxCommandSize", _wrap_ClientManager_setMaxCommandSize},
    { "getMaxCommandSize", _wrap_ClientManager_getMaxCommandSize},
    { "setLogTimeout", _wrap_ClientManager_setLogTimeout},
    { "getLogTimeout", _wrap_ClientManager_getLogTimeout},
    { "getStartTime", _wrap_ClientManager_getStartTime},
    { "getUpTime", _wrap_ClientManager_getUpTime},
    {0,0}
};
static swig_lua_method swig_ClientManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClientManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClientManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClientManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClientManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClientManager_Sf_SwigStatic = {
    "ClientManager",
    swig_ClientManager_Sf_SwigStatic_methods,
    swig_ClientManager_Sf_SwigStatic_attributes,
    swig_ClientManager_Sf_SwigStatic_constants,
    swig_ClientManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClientManager_bases[] = {0};
static const char *swig_ClientManager_base_names[] = {0};
static swig_lua_class _wrap_class_ClientManager = { "ClientManager", "ClientManager", &SWIGTYPE_p_adchpp__ClientManager,0,0, swig_ClientManager_methods, swig_ClientManager_attributes, &swig_ClientManager_Sf_SwigStatic, swig_ClientManager_meta, swig_ClientManager_bases, swig_ClientManager_base_names };

static int _wrap_Plugin_getVersion(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::Plugin *arg1 = (adchpp::Plugin *) 0 ;
  int result;
  
  SWIG_check_num_args("adchpp::Plugin::getVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::Plugin::getVersion",1,"adchpp::Plugin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__Plugin,0))){
    SWIG_fail_ptr("Plugin_getVersion",1,SWIGTYPE_p_adchpp__Plugin);
  }
  
  {
    try {
      result = (int)(arg1)->getVersion();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Plugin(void *obj) {
adchpp::Plugin *arg1 = (adchpp::Plugin *) obj;
delete arg1;
}
static swig_lua_attribute swig_Plugin_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Plugin_methods[]= {
    { "getVersion", _wrap_Plugin_getVersion},
    {0,0}
};
static swig_lua_method swig_Plugin_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Plugin_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Plugin_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Plugin_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Plugin_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Plugin_Sf_SwigStatic = {
    "Plugin",
    swig_Plugin_Sf_SwigStatic_methods,
    swig_Plugin_Sf_SwigStatic_attributes,
    swig_Plugin_Sf_SwigStatic_constants,
    swig_Plugin_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Plugin_bases[] = {0};
static const char *swig_Plugin_base_names[] = {0};
static swig_lua_class _wrap_class_Plugin = { "Plugin", "Plugin", &SWIGTYPE_p_adchpp__Plugin,0, swig_delete_Plugin, swig_Plugin_methods, swig_Plugin_attributes, &swig_Plugin_Sf_SwigStatic, swig_Plugin_meta, swig_Plugin_bases, swig_Plugin_base_names };

static int _wrap_PluginManager_attention(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::function< void () > arg2 ;
  
  SWIG_check_num_args("adchpp::PluginManager::attention",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::attention",1,"adchpp::PluginManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_attention",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  {
    arg2 = LuaFunction(L);
  }
  {
    try {
      adchpp_PluginManager_attention(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_getPluginList(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  StringList *result = 0 ;
  
  SWIG_check_num_args("adchpp::PluginManager::getPluginList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::getPluginList",1,"adchpp::PluginManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_getPluginList",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  {
    try {
      result = (StringList *) &((adchpp::PluginManager const *)arg1)->getPluginList();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_getPluginPath(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("adchpp::PluginManager::getPluginPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::getPluginPath",1,"adchpp::PluginManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_getPluginPath",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  {
    try {
      result = (std::string *) &((adchpp::PluginManager const *)arg1)->getPluginPath();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_setPluginList(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  StringList *arg2 = 0 ;
  
  SWIG_check_num_args("adchpp::PluginManager::setPluginList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::setPluginList",1,"adchpp::PluginManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adchpp::PluginManager::setPluginList",2,"StringList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_setPluginList",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("PluginManager_setPluginList",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  {
    try {
      (arg1)->setPluginList((StringList const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_setPluginPath(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("adchpp::PluginManager::setPluginPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::setPluginPath",1,"adchpp::PluginManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::PluginManager::setPluginPath",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_setPluginPath",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      (arg1)->setPluginPath((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_registerPlugin(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< shared_ptr< adchpp::Plugin > > arg3 ;
  std::string temp2 ;
  shared_ptr< adchpp::Plugin > *argp3 ;
  bool result;
  
  SWIG_check_num_args("adchpp::PluginManager::registerPlugin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::registerPlugin",1,"adchpp::PluginManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::PluginManager::registerPlugin",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::PluginManager::registerPlugin",3,"shared_ptr< adchpp::Plugin >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_registerPlugin",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_shared_ptrT_adchpp__Plugin_t,0))){
    SWIG_fail_ptr("PluginManager_registerPlugin",3,SWIGTYPE_p_shared_ptrT_adchpp__Plugin_t);
  }
  arg3 = *argp3;
  
  {
    try {
      result = (bool)(arg1)->registerPlugin((std::string const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_unregisterPlugin(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("adchpp::PluginManager::unregisterPlugin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::unregisterPlugin",1,"adchpp::PluginManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::PluginManager::unregisterPlugin",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_unregisterPlugin",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (bool)(arg1)->unregisterPlugin((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_getPlugin(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< shared_ptr< adchpp::Plugin > > result;
  
  SWIG_check_num_args("adchpp::PluginManager::getPlugin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::getPlugin",1,"adchpp::PluginManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::PluginManager::getPlugin",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_getPlugin",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (arg1)->getPlugin((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    shared_ptr< adchpp::Plugin > * resultptr = new shared_ptr< adchpp::Plugin >((const shared_ptr< adchpp::Plugin > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__Plugin_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_onCommand(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< adchpp::Signal< void (adchpp::Entity &,std::vector< std::string > const &,bool &) >::Slot > arg3 ;
  std::string temp2 ;
  adchpp::PluginManager::CommandSlot *argp3 ;
  adchpp::ManagedConnectionPtr result;
  
  SWIG_check_num_args("adchpp::PluginManager::onCommand",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::onCommand",1,"adchpp::PluginManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::PluginManager::onCommand",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("adchpp::PluginManager::onCommand",3,"adchpp::PluginManager::CommandSlot");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_onCommand",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot,0))){
    SWIG_fail_ptr("PluginManager_onCommand",3,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot);
  }
  arg3 = *argp3;
  
  {
    try {
      result = adchpp_PluginManager_onCommand(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    adchpp::ManagedConnectionPtr * resultptr = new adchpp::ManagedConnectionPtr((const adchpp::ManagedConnectionPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_adchpp__ManagedConnection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_getCommandSignal(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  adchpp::PluginManager::CommandSignal *result = 0 ;
  
  SWIG_check_num_args("adchpp::PluginManager::getCommandSignal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::getCommandSignal",1,"adchpp::PluginManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("adchpp::PluginManager::getCommandSignal",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_getCommandSignal",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try {
      result = (adchpp::PluginManager::CommandSignal *) &(arg1)->getCommandSignal((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginManager_registerPluginData(lua_State* L) {
  int SWIG_arg = 0;
  adchpp::PluginManager *arg1 = (adchpp::PluginManager *) 0 ;
  PluginDataHandle result;
  
  SWIG_check_num_args("adchpp::PluginManager::registerPluginData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adchpp::PluginManager::registerPluginData",1,"adchpp::PluginManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_adchpp__PluginManager,0))){
    SWIG_fail_ptr("PluginManager_registerPluginData",1,SWIGTYPE_p_adchpp__PluginManager);
  }
  
  {
    try {
      result = adchpp_PluginManager_registerPluginData(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  {
    PluginDataHandle * resultptr = new PluginDataHandle((const PluginDataHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PluginDataHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_PluginManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PluginManager_methods[]= {
    { "attention", _wrap_PluginManager_attention},
    { "getPluginList", _wrap_PluginManager_getPluginList},
    { "getPluginPath", _wrap_PluginManager_getPluginPath},
    { "setPluginList", _wrap_PluginManager_setPluginList},
    { "setPluginPath", _wrap_PluginManager_setPluginPath},
    { "registerPlugin", _wrap_PluginManager_registerPlugin},
    { "unregisterPlugin", _wrap_PluginManager_unregisterPlugin},
    { "getPlugin", _wrap_PluginManager_getPlugin},
    { "onCommand", _wrap_PluginManager_onCommand},
    { "getCommandSignal", _wrap_PluginManager_getCommandSignal},
    { "registerPluginData", _wrap_PluginManager_registerPluginData},
    {0,0}
};
static swig_lua_method swig_PluginManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PluginManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PluginManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PluginManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PluginManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PluginManager_Sf_SwigStatic = {
    "PluginManager",
    swig_PluginManager_Sf_SwigStatic_methods,
    swig_PluginManager_Sf_SwigStatic_attributes,
    swig_PluginManager_Sf_SwigStatic_constants,
    swig_PluginManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PluginManager_bases[] = {0};
static const char *swig_PluginManager_base_names[] = {0};
static swig_lua_class _wrap_class_PluginManager = { "PluginManager", "PluginManager", &SWIGTYPE_p_adchpp__PluginManager,0,0, swig_PluginManager_methods, swig_PluginManager_attributes, &swig_PluginManager_Sf_SwigStatic, swig_PluginManager_meta, swig_PluginManager_bases, swig_PluginManager_base_names };

static int _wrap_getCM(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  adchpp::ClientManager *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::getCM",0,0)
  {
    try {
      result = (adchpp::ClientManager *)adchpp::getCM(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__ClientManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getLM(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  adchpp::LogManager *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::getLM",0,0)
  {
    try {
      result = (adchpp::LogManager *)adchpp::getLM(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__LogManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getPM(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  adchpp::PluginManager *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::getPM",0,0)
  {
    try {
      result = (adchpp::PluginManager *)adchpp::getPM(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__PluginManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getSM(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  adchpp::SocketManager *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::getSM",0,0)
  {
    try {
      result = (adchpp::SocketManager *)adchpp::getSM(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_adchpp__SocketManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getConfigPath(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::getConfigPath",0,0)
  {
    try {
      result = (std::string *) &adchpp::getConfigPath(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getDataPath(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::getDataPath",0,0)
  {
    try {
      result = (std::string *) &adchpp::getDataPath(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Util_getCfgPath(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::Util_getCfgPath",0,0)
  {
    try {
      result = (std::string *) &adchpp::Util_getCfgPath(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Util_getLocalIp(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string result;
  
  arg1 = L;
  SWIG_check_num_args("adchpp::Util_getLocalIp",0,0)
  {
    try {
      result = adchpp::Util_getLocalIp(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_UnknownError, e.what());
    }
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "appName", _wrap_appName_get, _wrap_appName_set },
    { "versionString", _wrap_versionString_get, _wrap_versionString_set },
    { "versionFloat", _wrap_versionFloat_get, _wrap_versionFloat_set },
    { "AdcCommand_HUB_SID", _wrap_AdcCommand_HUB_SID_get, SWIG_Lua_set_immutable },
    { "AdcCommand_INVALID_SID", _wrap_AdcCommand_INVALID_SID_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("TigerHash_BITS", TigerHash::BITS)},
    {SWIG_LUA_CONSTTAB_INT("TigerHash_BYTES", TigerHash::BYTES)},
    {SWIG_LUA_CONSTTAB_INT("REASON_BAD_STATE", adchpp::REASON_BAD_STATE)},
    {SWIG_LUA_CONSTTAB_INT("REASON_CID_CHANGE", adchpp::REASON_CID_CHANGE)},
    {SWIG_LUA_CONSTTAB_INT("REASON_CID_TAKEN", adchpp::REASON_CID_TAKEN)},
    {SWIG_LUA_CONSTTAB_INT("REASON_FLOODING", adchpp::REASON_FLOODING)},
    {SWIG_LUA_CONSTTAB_INT("REASON_HUB_FULL", adchpp::REASON_HUB_FULL)},
    {SWIG_LUA_CONSTTAB_INT("REASON_INVALID_COMMAND_TYPE", adchpp::REASON_INVALID_COMMAND_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("REASON_INVALID_IP", adchpp::REASON_INVALID_IP)},
    {SWIG_LUA_CONSTTAB_INT("REASON_INVALID_SID", adchpp::REASON_INVALID_SID)},
    {SWIG_LUA_CONSTTAB_INT("REASON_LOGIN_TIMEOUT", adchpp::REASON_LOGIN_TIMEOUT)},
    {SWIG_LUA_CONSTTAB_INT("REASON_MAX_COMMAND_SIZE", adchpp::REASON_MAX_COMMAND_SIZE)},
    {SWIG_LUA_CONSTTAB_INT("REASON_NICK_INVALID", adchpp::REASON_NICK_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("REASON_NICK_TAKEN", adchpp::REASON_NICK_TAKEN)},
    {SWIG_LUA_CONSTTAB_INT("REASON_NO_BASE_SUPPORT", adchpp::REASON_NO_BASE_SUPPORT)},
    {SWIG_LUA_CONSTTAB_INT("REASON_NO_TIGR_SUPPORT", adchpp::REASON_NO_TIGR_SUPPORT)},
    {SWIG_LUA_CONSTTAB_INT("REASON_PID_MISSING", adchpp::REASON_PID_MISSING)},
    {SWIG_LUA_CONSTTAB_INT("REASON_PID_CID_LENGTH", adchpp::REASON_PID_CID_LENGTH)},
    {SWIG_LUA_CONSTTAB_INT("REASON_PID_CID_MISMATCH", adchpp::REASON_PID_CID_MISMATCH)},
    {SWIG_LUA_CONSTTAB_INT("REASON_PID_WITHOUT_CID", adchpp::REASON_PID_WITHOUT_CID)},
    {SWIG_LUA_CONSTTAB_INT("REASON_PLUGIN", adchpp::REASON_PLUGIN)},
    {SWIG_LUA_CONSTTAB_INT("REASON_WRITE_OVERFLOW", adchpp::REASON_WRITE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("REASON_NO_BANDWIDTH", adchpp::REASON_NO_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("REASON_INVALID_DESCRIPTION", adchpp::REASON_INVALID_DESCRIPTION)},
    {SWIG_LUA_CONSTTAB_INT("REASON_WRITE_TIMEOUT", adchpp::REASON_WRITE_TIMEOUT)},
    {SWIG_LUA_CONSTTAB_INT("REASON_SOCKET_ERROR", adchpp::REASON_SOCKET_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("REASON_LAST", adchpp::REASON_LAST)},
    {SWIG_LUA_CONSTTAB_INT("CID_SIZE", adchpp::CID::SIZE)},
    {SWIG_LUA_CONSTTAB_INT("CID_BASE32_SIZE", adchpp::CID::BASE32_SIZE)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_GENERIC", adchpp::AdcCommand::ERROR_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_HUB_GENERIC", adchpp::AdcCommand::ERROR_HUB_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_HUB_FULL", adchpp::AdcCommand::ERROR_HUB_FULL)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_HUB_DISABLED", adchpp::AdcCommand::ERROR_HUB_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_LOGIN_GENERIC", adchpp::AdcCommand::ERROR_LOGIN_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_NICK_INVALID", adchpp::AdcCommand::ERROR_NICK_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_NICK_TAKEN", adchpp::AdcCommand::ERROR_NICK_TAKEN)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_BAD_PASSWORD", adchpp::AdcCommand::ERROR_BAD_PASSWORD)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_CID_TAKEN", adchpp::AdcCommand::ERROR_CID_TAKEN)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_COMMAND_ACCESS", adchpp::AdcCommand::ERROR_COMMAND_ACCESS)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_REGGED_ONLY", adchpp::AdcCommand::ERROR_REGGED_ONLY)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_INVALID_PID", adchpp::AdcCommand::ERROR_INVALID_PID)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_BANNED_GENERIC", adchpp::AdcCommand::ERROR_BANNED_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_PERM_BANNED", adchpp::AdcCommand::ERROR_PERM_BANNED)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_TEMP_BANNED", adchpp::AdcCommand::ERROR_TEMP_BANNED)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_PROTOCOL_GENERIC", adchpp::AdcCommand::ERROR_PROTOCOL_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_PROTOCOL_UNSUPPORTED", adchpp::AdcCommand::ERROR_PROTOCOL_UNSUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_INF_MISSING", adchpp::AdcCommand::ERROR_INF_MISSING)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_BAD_STATE", adchpp::AdcCommand::ERROR_BAD_STATE)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_FEATURE_MISSING", adchpp::AdcCommand::ERROR_FEATURE_MISSING)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_BAD_IP", adchpp::AdcCommand::ERROR_BAD_IP)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_TRANSFER_GENERIC", adchpp::AdcCommand::ERROR_TRANSFER_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_FILE_NOT_AVAILABLE", adchpp::AdcCommand::ERROR_FILE_NOT_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_FILE_PART_NOT_AVAILABLE", adchpp::AdcCommand::ERROR_FILE_PART_NOT_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_ERROR_SLOTS_FULL", adchpp::AdcCommand::ERROR_SLOTS_FULL)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_SEV_SUCCESS", adchpp::AdcCommand::SEV_SUCCESS)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_SEV_RECOVERABLE", adchpp::AdcCommand::SEV_RECOVERABLE)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_SEV_FATAL", adchpp::AdcCommand::SEV_FATAL)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_PRIORITY_NORMAL", adchpp::AdcCommand::PRIORITY_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_PRIORITY_LOW", adchpp::AdcCommand::PRIORITY_LOW)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_PRIORITY_IGNORE", adchpp::AdcCommand::PRIORITY_IGNORE)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_BROADCAST", adchpp::AdcCommand::TYPE_BROADCAST)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_CLIENT", adchpp::AdcCommand::TYPE_CLIENT)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_DIRECT", adchpp::AdcCommand::TYPE_DIRECT)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_ECHO", adchpp::AdcCommand::TYPE_ECHO)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_FEATURE", adchpp::AdcCommand::TYPE_FEATURE)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_INFO", adchpp::AdcCommand::TYPE_INFO)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_HUB", adchpp::AdcCommand::TYPE_HUB)},
    {SWIG_LUA_CONSTTAB_CHAR("AdcCommand_TYPE_UDP", adchpp::AdcCommand::TYPE_UDP)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_SUP", adchpp::AdcCommand::CMD_SUP)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_STA", adchpp::AdcCommand::CMD_STA)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_INF", adchpp::AdcCommand::CMD_INF)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_MSG", adchpp::AdcCommand::CMD_MSG)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_SCH", adchpp::AdcCommand::CMD_SCH)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_RES", adchpp::AdcCommand::CMD_RES)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_CTM", adchpp::AdcCommand::CMD_CTM)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_RCM", adchpp::AdcCommand::CMD_RCM)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_GPA", adchpp::AdcCommand::CMD_GPA)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_PAS", adchpp::AdcCommand::CMD_PAS)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_QUI", adchpp::AdcCommand::CMD_QUI)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_GET", adchpp::AdcCommand::CMD_GET)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_GFI", adchpp::AdcCommand::CMD_GFI)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_SND", adchpp::AdcCommand::CMD_SND)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_SID", adchpp::AdcCommand::CMD_SID)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_CMD", adchpp::AdcCommand::CMD_CMD)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_NAT", adchpp::AdcCommand::CMD_NAT)},
    {SWIG_LUA_CONSTTAB_INT("AdcCommand_CMD_RNT", adchpp::AdcCommand::CMD_RNT)},
    {SWIG_LUA_CONSTTAB_INT("Entity_STATE_PROTOCOL", adchpp::Entity::STATE_PROTOCOL)},
    {SWIG_LUA_CONSTTAB_INT("Entity_STATE_IDENTIFY", adchpp::Entity::STATE_IDENTIFY)},
    {SWIG_LUA_CONSTTAB_INT("Entity_STATE_VERIFY", adchpp::Entity::STATE_VERIFY)},
    {SWIG_LUA_CONSTTAB_INT("Entity_STATE_NORMAL", adchpp::Entity::STATE_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("Entity_STATE_DATA", adchpp::Entity::STATE_DATA)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_BOT", adchpp::Entity::FLAG_BOT)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_REGISTERED", adchpp::Entity::FLAG_REGISTERED)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_OP", adchpp::Entity::FLAG_OP)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_SU", adchpp::Entity::FLAG_SU)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_OWNER", adchpp::Entity::FLAG_OWNER)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_HUB", adchpp::Entity::FLAG_HUB)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_HIDDEN", adchpp::Entity::FLAG_HIDDEN)},
    {SWIG_LUA_CONSTTAB_INT("Entity_MASK_CLIENT_TYPE", adchpp::Entity::MASK_CLIENT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_PASSWORD", adchpp::Entity::FLAG_PASSWORD)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_EXT_AWAY", adchpp::Entity::FLAG_EXT_AWAY)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_OK_IP", adchpp::Entity::FLAG_OK_IP)},
    {SWIG_LUA_CONSTTAB_INT("Entity_FLAG_GHOST", adchpp::Entity::FLAG_GHOST)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "free_lua_ref", _wrap_free_lua_ref},
    { "new_size_t", _wrap_new_size_t},
    { "delete_size_t", _wrap_delete_size_t},
    { "size_t_getitem", _wrap_size_t_getitem},
    { "size_t_setitem", _wrap_size_t_setitem},
    { "SimpleXML_escape", _wrap_SimpleXML_escape},
    { "SimpleXML_needsEscape", _wrap_SimpleXML_needsEscape},
    { "Buffer_create", _wrap_Buffer_create},
    { "ServerInfo_create", _wrap_ServerInfo_create},
    { "CID_generate", _wrap_CID_generate},
    { "AdcCommand_toSID", _wrap_AdcCommand_toSID},
    { "AdcCommand_fromSID", _wrap_AdcCommand_fromSID},
    { "AdcCommand_appendSID", _wrap_AdcCommand_appendSID},
    { "AdcCommand_toField", _wrap_AdcCommand_toField},
    { "AdcCommand_fromField", _wrap_AdcCommand_fromField},
    { "AdcCommand_toFourCC", _wrap_AdcCommand_toFourCC},
    { "AdcCommand_fromFourCC", _wrap_AdcCommand_fromFourCC},
    { "AdcCommand_escape", _wrap_AdcCommand_escape},
    { "AdcCommand_toCMD", _wrap_AdcCommand_toCMD},
    { "getCM", _wrap_getCM},
    { "getLM", _wrap_getLM},
    { "getPM", _wrap_getPM},
    { "getSM", _wrap_getSM},
    { "getConfigPath", _wrap_getConfigPath},
    { "getDataPath", _wrap_getDataPath},
    { "Util_getCfgPath", _wrap_Util_getCfgPath},
    { "Util_getLocalIp", _wrap_Util_getLocalIp},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_TServerInfoPtr,
&_wrap_class_TManagedConnectionPtr,
&_wrap_class_TEntityList,
&_wrap_class_TStringList,
&_wrap_class_TByteVector,
&_wrap_class_TServerInfoList,
&_wrap_class_TLSInfo,
&_wrap_class_Exception,
&_wrap_class_SimpleXML,
&_wrap_class_TigerHash,
&_wrap_class_Buffer,
&_wrap_class_ManagedConnection,
&_wrap_class_ServerInfo,
&_wrap_class_SocketStats,
&_wrap_class_SocketManager,
&_wrap_class_CID,
&_wrap_class_AdcCommand,
&_wrap_class_Entity,
&_wrap_class_Client,
&_wrap_class_Bot,
&_wrap_class_Hub,
&_wrap_class_SignalE,
&_wrap_class_SignalTraitsE,
&_wrap_class_SignalEAB,
&_wrap_class_SignalTraitsEAB,
&_wrap_class_SignalES,
&_wrap_class_SignalTraitsES,
&_wrap_class_SignalEcAB,
&_wrap_class_SignalTraitsEcAB,
&_wrap_class_SignalEI,
&_wrap_class_SignalTraitsEI,
&_wrap_class_SignalERS,
&_wrap_class_SignalTraitsERS,
&_wrap_class_SignalESB,
&_wrap_class_SignalTraitsESB,
&_wrap_class_SignalS,
&_wrap_class_SignalTraitsS,
&_wrap_class_SignalSt,
&_wrap_class_SignalTraitsSt,
&_wrap_class_LogManager,
&_wrap_class_ClientManager,
&_wrap_class_Plugin,
&_wrap_class_PluginManager,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "luadchpp",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_adchpp__BotTo_p_adchpp__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((adchpp::Entity *)  ((adchpp::Bot *) x));
}
static void *_p_adchpp__HubTo_p_adchpp__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((adchpp::Entity *)  ((adchpp::Hub *) x));
}
static void *_p_adchpp__ClientTo_p_adchpp__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((adchpp::Entity *)  ((adchpp::Client *) x));
}
static void *_p_ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Exception *) x));
}
static swig_type_info _swigt__ParseException = {"_ParseException", "ParseException", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Callback = {"_p_Callback", "Callback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandSignal = {"_p_CommandSignal", "CommandSignal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandSlot = {"_p_CommandSlot", "CommandSlot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataFunction = {"_p_DataFunction", "DataFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exception = {"_p_Exception", "Exception *", 0, 0, (void*)&_wrap_class_Exception, 0};
static swig_type_info _swigt__p_Hub = {"_p_Hub", "Hub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagedConnection = {"_p_ManagedConnection", "ManagedConnection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PluginDataHandle = {"_p_PluginDataHandle", "PluginDataHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SWIGLUA_REF = {"_p_SWIGLUA_REF", "SWIGLUA_REF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SendHandler = {"_p_SendHandler", "SendHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Signal = {"_p_Signal", "Signal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalBadLine = {"_p_SignalBadLine", "SignalBadLine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalConnected = {"_p_SignalConnected", "SignalConnected *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalDisconnected = {"_p_SignalDisconnected", "SignalDisconnected *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalLog = {"_p_SignalLog", "SignalLog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalReady = {"_p_SignalReady", "SignalReady *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalReceive = {"_p_SignalReceive", "SignalReceive *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalSend = {"_p_SignalSend", "SignalSend *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalState = {"_p_SignalState", "SignalState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleXML = {"_p_SimpleXML", "SimpleXML *", 0, 0, (void*)&_wrap_class_SimpleXML, 0};
static swig_type_info _swigt__p_TLSInfo = {"_p_TLSInfo", "TLSInfo *", 0, 0, (void*)&_wrap_class_TLSInfo, 0};
static swig_type_info _swigt__p_TigerHash = {"_p_TigerHash", "TigerHash *", 0, 0, (void*)&_wrap_class_TigerHash, 0};
static swig_type_info _swigt__p_adchpp__AdcCommand = {"_p_adchpp__AdcCommand", "adchpp::AdcCommand *", 0, 0, (void*)&_wrap_class_AdcCommand, 0};
static swig_type_info _swigt__p_adchpp__Bot = {"_p_adchpp__Bot", "adchpp::Bot *", 0, 0, (void*)&_wrap_class_Bot, 0};
static swig_type_info _swigt__p_adchpp__Buffer = {"_p_adchpp__Buffer", "adchpp::Buffer *", 0, 0, (void*)&_wrap_class_Buffer, 0};
static swig_type_info _swigt__p_adchpp__CID = {"_p_adchpp__CID", "adchpp::CID *", 0, 0, (void*)&_wrap_class_CID, 0};
static swig_type_info _swigt__p_adchpp__Client = {"_p_adchpp__Client", "adchpp::Client *", 0, 0, (void*)&_wrap_class_Client, 0};
static swig_type_info _swigt__p_adchpp__ClientManager = {"_p_adchpp__ClientManager", "adchpp::ClientManager *", 0, 0, (void*)&_wrap_class_ClientManager, 0};
static swig_type_info _swigt__p_adchpp__Entity = {"_p_adchpp__Entity", "adchpp::Entity *", 0, 0, (void*)&_wrap_class_Entity, 0};
static swig_type_info _swigt__p_adchpp__Hub = {"_p_adchpp__Hub", "adchpp::Hub *", 0, 0, (void*)&_wrap_class_Hub, 0};
static swig_type_info _swigt__p_adchpp__LogManager = {"_p_adchpp__LogManager", "adchpp::LogManager *", 0, 0, (void*)&_wrap_class_LogManager, 0};
static swig_type_info _swigt__p_adchpp__ManagedConnection = {"_p_adchpp__ManagedConnection", "adchpp::ManagedConnection *", 0, 0, (void*)&_wrap_class_ManagedConnection, 0};
static swig_type_info _swigt__p_adchpp__Plugin = {"_p_adchpp__Plugin", "adchpp::Plugin *", 0, 0, (void*)&_wrap_class_Plugin, 0};
static swig_type_info _swigt__p_adchpp__PluginManager = {"_p_adchpp__PluginManager", "adchpp::PluginManager *", 0, 0, (void*)&_wrap_class_PluginManager, 0};
static swig_type_info _swigt__p_adchpp__ServerInfo = {"_p_adchpp__ServerInfo", "adchpp::ServerInfo *", 0, 0, (void*)&_wrap_class_ServerInfo, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fSimpleXML_const_RF_t = {"_p_adchpp__SignalT_void_fSimpleXML_const_RF_t", "adchpp::Signal< void (SimpleXML const &) > *", 0, 0, (void*)&_wrap_class_SignalS, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_RF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_RF_t", "adchpp::Signal< void (adchpp::Entity &) > *|adchpp::ClientManager::SignalConnected::Signal *|adchpp::ClientManager::SignalReady::Signal *", 0, 0, (void*)&_wrap_class_SignalE, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t", "adchpp::ClientManager::SignalDisconnected::Signal *|adchpp::Signal< void (adchpp::Entity &,DCReason,std::string const &) > *", 0, 0, (void*)&_wrap_class_SignalERS, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t", "adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *|adchpp::ClientManager::SignalReceive::Signal *", 0, 0, (void*)&_wrap_class_SignalEAB, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t", "adchpp::Signal< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *|adchpp::ClientManager::SignalSend::Signal *", 0, 0, (void*)&_wrap_class_SignalEcAB, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t", "adchpp::Signal< void (adchpp::Entity &,int) > *|adchpp::ClientManager::SignalState::Signal *", 0, 0, (void*)&_wrap_class_SignalEI, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t", "adchpp::Signal< void (adchpp::Entity &,std::string const &) > *|adchpp::ClientManager::SignalBadLine::Signal *", 0, 0, (void*)&_wrap_class_SignalES, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t", "adchpp::Signal< void (adchpp::Entity &,std::vector< std::string > const &,bool &) > *|adchpp::Signal< void (adchpp::Entity &,StringList const &,bool &) > *|adchpp::PluginManager::CommandSignal *", 0, 0, (void*)&_wrap_class_SignalESB, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot = {"_p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot", "adchpp::Signal< void (adchpp::Entity &,std::vector< std::string > const &,bool &) >::Slot *|adchpp::PluginManager::CommandSlot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_adchpp__SignalT_void_fstd__string_const_RF_t = {"_p_adchpp__SignalT_void_fstd__string_const_RF_t", "adchpp::Signal< void (std::string const &) > *|adchpp::LogManager::SignalLog::Signal *", 0, 0, (void*)&_wrap_class_SignalSt, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t = {"_p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t", "adchpp::SignalTraits< void (SimpleXML const &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsS, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t", "adchpp::SignalTraits< void (adchpp::Entity &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsE, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t", "adchpp::SignalTraits< void (adchpp::Entity &,DCReason,std::string const &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsERS, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t", "adchpp::SignalTraits< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsEAB, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t", "adchpp::SignalTraits< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsEcAB, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t", "adchpp::SignalTraits< void (adchpp::Entity &,int) > *", 0, 0, (void*)&_wrap_class_SignalTraitsEI, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t", "adchpp::SignalTraits< void (adchpp::Entity &,std::string const &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsES, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t = {"_p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t", "adchpp::SignalTraits< void (adchpp::Entity &,std::vector< std::string > const &,bool &) > *|adchpp::SignalTraits< void (adchpp::Entity &,StringList const &,bool &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsESB, 0};
static swig_type_info _swigt__p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t = {"_p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t", "adchpp::SignalTraits< void (std::string const &) > *", 0, 0, (void*)&_wrap_class_SignalTraitsSt, 0};
static swig_type_info _swigt__p_adchpp__SocketManager = {"_p_adchpp__SocketManager", "adchpp::SocketManager *", 0, 0, (void*)&_wrap_class_SocketManager, 0};
static swig_type_info _swigt__p_adchpp__SocketStats = {"_p_adchpp__SocketStats", "adchpp::SocketStats *", 0, 0, (void*)&_wrap_class_SocketStats, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lua_State = {"_p_lua_State", "lua_State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_adchpp__Buffer_t = {"_p_shared_ptrT_adchpp__Buffer_t", "shared_ptr< adchpp::Buffer > *|adchpp::BufferPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_adchpp__ManagedConnection_t = {"_p_shared_ptrT_adchpp__ManagedConnection_t", "adchpp::ManagedConnectionPtr *|shared_ptr< adchpp::ManagedConnection > *", 0, 0, (void*)&_wrap_class_TManagedConnectionPtr, 0};
static swig_type_info _swigt__p_shared_ptrT_adchpp__Plugin_t = {"_p_shared_ptrT_adchpp__Plugin_t", "shared_ptr< adchpp::Plugin > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_adchpp__ServerInfo_t = {"_p_shared_ptrT_adchpp__ServerInfo_t", "adchpp::ServerInfoPtr *|shared_ptr< adchpp::ServerInfo > *", 0, 0, (void*)&_wrap_class_TServerInfoPtr, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fF_t = {"_p_std__functionT_void_fF_t", "adchpp::SocketManager::Callback *|std::function< void () > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fSimpleXML_const_RF_t = {"_p_std__functionT_void_fSimpleXML_const_RF_t", "std::function< void (SimpleXML const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t = {"_p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t", "std::function< void (adchpp::Bot &,shared_ptr< adchpp::Buffer > const &) > *|adchpp::Bot::SendHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t = {"_p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t", "adchpp::Client::DataFunction *|std::function< void (adchpp::Client &,unsigned char const *,unsigned int) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_RF_t = {"_p_std__functionT_void_fadchpp__Entity_RF_t", "std::function< void (adchpp::Entity &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t = {"_p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t", "std::function< void (adchpp::Entity &,DCReason,std::string const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t = {"_p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t", "std::function< void (adchpp::Entity &,adchpp::AdcCommand &,bool &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t = {"_p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t", "std::function< void (adchpp::Entity &,adchpp::AdcCommand const &,bool &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_R_intF_t = {"_p_std__functionT_void_fadchpp__Entity_R_intF_t", "std::function< void (adchpp::Entity &,int) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t = {"_p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t", "std::function< void (adchpp::Entity &,std::string const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t = {"_p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t", "std::function< void (adchpp::Entity &,std::vector< std::string > const &,bool &) > *|std::function< void (adchpp::Entity &,StringList const &,bool &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fstd__string_const_RF_t = {"_p_std__functionT_void_fstd__string_const_RF_t", "std::function< void (std::string const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_adchpp__Entity_p_t = {"_p_std__vectorT_adchpp__Entity_p_t", "adchpp::EntityList *|std::vector< adchpp::Entity * > *", 0, 0, (void*)&_wrap_class_TEntityList, 0};
static swig_type_info _swigt__p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t = {"_p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t", "std::vector< shared_ptr< adchpp::ServerInfo > > *|adchpp::ServerInfoList *", 0, 0, (void*)&_wrap_class_TServerInfoList, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|StringList *", 0, 0, (void*)&_wrap_class_TStringList, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *|std::vector< uint8_t > *|ByteVector *", 0, 0, (void*)&_wrap_class_TByteVector, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "size_t *|uint32_t *|unsigned int *|time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__ParseException,
  &_swigt__p_Callback,
  &_swigt__p_CommandSignal,
  &_swigt__p_CommandSlot,
  &_swigt__p_DataFunction,
  &_swigt__p_Exception,
  &_swigt__p_Hub,
  &_swigt__p_ManagedConnection,
  &_swigt__p_PluginDataHandle,
  &_swigt__p_SWIGLUA_REF,
  &_swigt__p_SendHandler,
  &_swigt__p_Signal,
  &_swigt__p_SignalBadLine,
  &_swigt__p_SignalConnected,
  &_swigt__p_SignalDisconnected,
  &_swigt__p_SignalLog,
  &_swigt__p_SignalReady,
  &_swigt__p_SignalReceive,
  &_swigt__p_SignalSend,
  &_swigt__p_SignalState,
  &_swigt__p_SimpleXML,
  &_swigt__p_TLSInfo,
  &_swigt__p_TigerHash,
  &_swigt__p_adchpp__AdcCommand,
  &_swigt__p_adchpp__Bot,
  &_swigt__p_adchpp__Buffer,
  &_swigt__p_adchpp__CID,
  &_swigt__p_adchpp__Client,
  &_swigt__p_adchpp__ClientManager,
  &_swigt__p_adchpp__Entity,
  &_swigt__p_adchpp__Hub,
  &_swigt__p_adchpp__LogManager,
  &_swigt__p_adchpp__ManagedConnection,
  &_swigt__p_adchpp__Plugin,
  &_swigt__p_adchpp__PluginManager,
  &_swigt__p_adchpp__ServerInfo,
  &_swigt__p_adchpp__SignalT_void_fSimpleXML_const_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,
  &_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot,
  &_swigt__p_adchpp__SignalT_void_fstd__string_const_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,
  &_swigt__p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t,
  &_swigt__p_adchpp__SocketManager,
  &_swigt__p_adchpp__SocketStats,
  &_swigt__p_difference_type,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_lua_State,
  &_swigt__p_shared_ptrT_adchpp__Buffer_t,
  &_swigt__p_shared_ptrT_adchpp__ManagedConnection_t,
  &_swigt__p_shared_ptrT_adchpp__Plugin_t,
  &_swigt__p_shared_ptrT_adchpp__ServerInfo_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__exception,
  &_swigt__p_std__functionT_void_fF_t,
  &_swigt__p_std__functionT_void_fSimpleXML_const_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_R_intF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t,
  &_swigt__p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,
  &_swigt__p_std__functionT_void_fstd__string_const_RF_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_adchpp__Entity_p_t,
  &_swigt__p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__ParseException[] = {  {&_swigt__ParseException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Callback[] = {  {&_swigt__p_Callback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandSignal[] = {  {&_swigt__p_CommandSignal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandSlot[] = {  {&_swigt__p_CommandSlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataFunction[] = {  {&_swigt__p_DataFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exception[] = {  {&_swigt__p_Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Hub[] = {  {&_swigt__p_Hub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagedConnection[] = {  {&_swigt__p_ManagedConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PluginDataHandle[] = {  {&_swigt__p_PluginDataHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_REF[] = {  {&_swigt__p_SWIGLUA_REF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SendHandler[] = {  {&_swigt__p_SendHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Signal[] = {  {&_swigt__p_Signal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalBadLine[] = {  {&_swigt__p_SignalBadLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalConnected[] = {  {&_swigt__p_SignalConnected, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalDisconnected[] = {  {&_swigt__p_SignalDisconnected, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalLog[] = {  {&_swigt__p_SignalLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalReady[] = {  {&_swigt__p_SignalReady, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalReceive[] = {  {&_swigt__p_SignalReceive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSend[] = {  {&_swigt__p_SignalSend, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalState[] = {  {&_swigt__p_SignalState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleXML[] = {  {&_swigt__p_SimpleXML, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TLSInfo[] = {  {&_swigt__p_TLSInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TigerHash[] = {  {&_swigt__p_TigerHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__AdcCommand[] = {  {&_swigt__p_adchpp__AdcCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__Bot[] = {  {&_swigt__p_adchpp__Bot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__Buffer[] = {  {&_swigt__p_adchpp__Buffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__CID[] = {  {&_swigt__p_adchpp__CID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__Client[] = {  {&_swigt__p_adchpp__Client, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__ClientManager[] = {  {&_swigt__p_adchpp__ClientManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__Entity[] = {  {&_swigt__p_adchpp__Hub, _p_adchpp__HubTo_p_adchpp__Entity, 0, 0},  {&_swigt__p_adchpp__Client, _p_adchpp__ClientTo_p_adchpp__Entity, 0, 0},  {&_swigt__p_adchpp__Bot, _p_adchpp__BotTo_p_adchpp__Entity, 0, 0},  {&_swigt__p_adchpp__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__Hub[] = {  {&_swigt__p_adchpp__Hub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__LogManager[] = {  {&_swigt__p_adchpp__LogManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__ManagedConnection[] = {  {&_swigt__p_adchpp__ManagedConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__Plugin[] = {  {&_swigt__p_adchpp__Plugin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__PluginManager[] = {  {&_swigt__p_adchpp__PluginManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__ServerInfo[] = {  {&_swigt__p_adchpp__ServerInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fSimpleXML_const_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fSimpleXML_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot[] = {  {&_swigt__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalT_void_fstd__string_const_RF_t[] = {  {&_swigt__p_adchpp__SignalT_void_fstd__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t[] = {  {&_swigt__p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SocketManager[] = {  {&_swigt__p_adchpp__SocketManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adchpp__SocketStats[] = {  {&_swigt__p_adchpp__SocketStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lua_State[] = {  {&_swigt__p_lua_State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_adchpp__Buffer_t[] = {  {&_swigt__p_shared_ptrT_adchpp__Buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_adchpp__ManagedConnection_t[] = {  {&_swigt__p_shared_ptrT_adchpp__ManagedConnection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_adchpp__Plugin_t[] = {  {&_swigt__p_shared_ptrT_adchpp__Plugin_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_adchpp__ServerInfo_t[] = {  {&_swigt__p_shared_ptrT_adchpp__ServerInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Exception, _p_ExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fF_t[] = {  {&_swigt__p_std__functionT_void_fF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fSimpleXML_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fSimpleXML_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_R_intF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_R_intF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t[] = {  {&_swigt__p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fstd__string_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fstd__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_adchpp__Entity_p_t[] = {  {&_swigt__p_std__vectorT_adchpp__Entity_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t[] = {  {&_swigt__p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__ParseException,
  _swigc__p_Callback,
  _swigc__p_CommandSignal,
  _swigc__p_CommandSlot,
  _swigc__p_DataFunction,
  _swigc__p_Exception,
  _swigc__p_Hub,
  _swigc__p_ManagedConnection,
  _swigc__p_PluginDataHandle,
  _swigc__p_SWIGLUA_REF,
  _swigc__p_SendHandler,
  _swigc__p_Signal,
  _swigc__p_SignalBadLine,
  _swigc__p_SignalConnected,
  _swigc__p_SignalDisconnected,
  _swigc__p_SignalLog,
  _swigc__p_SignalReady,
  _swigc__p_SignalReceive,
  _swigc__p_SignalSend,
  _swigc__p_SignalState,
  _swigc__p_SimpleXML,
  _swigc__p_TLSInfo,
  _swigc__p_TigerHash,
  _swigc__p_adchpp__AdcCommand,
  _swigc__p_adchpp__Bot,
  _swigc__p_adchpp__Buffer,
  _swigc__p_adchpp__CID,
  _swigc__p_adchpp__Client,
  _swigc__p_adchpp__ClientManager,
  _swigc__p_adchpp__Entity,
  _swigc__p_adchpp__Hub,
  _swigc__p_adchpp__LogManager,
  _swigc__p_adchpp__ManagedConnection,
  _swigc__p_adchpp__Plugin,
  _swigc__p_adchpp__PluginManager,
  _swigc__p_adchpp__ServerInfo,
  _swigc__p_adchpp__SignalT_void_fSimpleXML_const_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_intF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_std__string_const_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,
  _swigc__p_adchpp__SignalT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t__Slot,
  _swigc__p_adchpp__SignalT_void_fstd__string_const_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fSimpleXML_const_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_intF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__string_const_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,
  _swigc__p_adchpp__SignalTraitsT_void_fstd__string_const_RF_t,
  _swigc__p_adchpp__SocketManager,
  _swigc__p_adchpp__SocketStats,
  _swigc__p_difference_type,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_lua_State,
  _swigc__p_shared_ptrT_adchpp__Buffer_t,
  _swigc__p_shared_ptrT_adchpp__ManagedConnection_t,
  _swigc__p_shared_ptrT_adchpp__Plugin_t,
  _swigc__p_shared_ptrT_adchpp__ServerInfo_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__exception,
  _swigc__p_std__functionT_void_fF_t,
  _swigc__p_std__functionT_void_fSimpleXML_const_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Bot_R_shared_ptrT_adchpp__Buffer_t_const_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Client_R_unsigned_char_const_p_unsigned_intF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_R_DCReason_std__string_const_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_R_bool_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_R_adchpp__AdcCommand_const_R_bool_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_R_intF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_R_std__string_const_RF_t,
  _swigc__p_std__functionT_void_fadchpp__Entity_R_std__vectorT_std__string_t_const_R_bool_RF_t,
  _swigc__p_std__functionT_void_fstd__string_const_RF_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_adchpp__Entity_p_t,
  _swigc__p_std__vectorT_shared_ptrT_adchpp__ServerInfo_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

